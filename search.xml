<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/04/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p>参考：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p><p>在过去，软件的交付件是代码和它编译的二进制文件，而Docker的出现使软件的交付件完全可以是容器。</p><p>容器的优点如下：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210430152833.png" alt="image-20210430152833830" style="zoom:80%;" /><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210423160422.png" alt="image-20200606212250845" style="zoom: 67%;" /><ol><li><p>==镜像(image)==：docker镜像好比一个模板，可以通过这个模板来创建容器(container)，一个镜像可以创建多个容器，类似Java中的Class</p></li><li><p>==容器(container)==：类似Java中通过Class创建的实例，Object；容器可以理解为一个简易的系统</p></li><li><p>==仓库(repository)==：存放镜像的地方，分为共有仓库和私有仓库</p><ul><li><p>Docker Hub：国外的</p></li><li><p>阿里云</p></li></ul></li></ol><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入 Docker 用户组（如果是root用户就不用考虑这个了）。</p><p>国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站。</p><p>centos配置阿里云镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="comment"># 阿里云镜像</span></span><br></pre></td></tr></table></figure><p>运行HelloWorld：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210423160430.png" alt="image-20200616151641013"></p><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 显示docker的基本信息</span></span><br><span class="line"></span><br><span class="line">docker info <span class="comment"># 系统信息，镜像和容器的数量</span></span><br><span class="line"></span><br><span class="line">docker --<span class="built_in">help</span> <span class="comment"># 全部信息</span></span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="查看所有本地主机上的镜像"><a href="#查看所有本地主机上的镜像" class="headerlink" title="查看所有本地主机上的镜像"></a>查看所有本地主机上的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       87eca374c0ed   2 weeks ago    447MB</span><br><span class="line">nginx         latest    62d49f9bab67   3 weeks ago    133MB</span><br><span class="line">hello-world   latest    d1165f221234   2 months ago   13.3kB</span><br><span class="line">centos        latest    300e315adb2f   4 months ago   209MB</span><br></pre></td></tr></table></figure><p>解释:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY  <span class="comment"># 镜像仓库源</span></span><br><span class="line">TAG                 <span class="comment"># 镜像的版本</span></span><br><span class="line">IMAGE ID           <span class="comment"># 镜像的ID</span></span><br><span class="line">CREATED           <span class="comment"># 镜像的创建时间</span></span><br><span class="line">SIZE <span class="comment"># 镜像的大小</span></span><br></pre></td></tr></table></figure><h4 id="搜索仓库中的镜像"><a href="#搜索仓库中的镜像" class="headerlink" title="搜索仓库中的镜像"></a>搜索仓库中的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br><span class="line"></span><br><span class="line">docker search mysql <span class="comment"># 搜索mysql</span></span><br></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull </span><br><span class="line"></span><br><span class="line">docker pull mysql <span class="comment"># 下载mysql镜像,默认最新版latest</span></span><br><span class="line"></span><br><span class="line">docker pull mysql:5.7 <span class="comment"># 指定版本下载 </span></span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>注意：<strong>拥有容器的镜像不可以删除，即使容器处于停止状态，必须先删除所有容器！！！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker rmi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个 可以通过名称 也可以指定id -f表示删除所有</span></span><br><span class="line">docker rmi -f 9cfcce23593a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个 用空格分隔id</span></span><br><span class="line">docker rmi -f <span class="built_in">id</span> <span class="built_in">id</span> <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有 images -aq就是查所有镜像id，从而递归删除</span></span><br><span class="line">docker rmi -f $(docker images -aq) </span><br></pre></td></tr></table></figure><p>还要注意一种情况：多个镜像id相同，此时删除也会不成功。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210506174546.png" alt="image-20210506174020708" style="zoom:80%;" /><p>此时还可以根据”REPOSITORY”和”TAR”进行删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker rmi tomcat:latest</span></span><br><span class="line">Untagged: tomcat:latest</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>有了镜像才能创建容器。</p><h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name=“Name” <span class="comment"># 容器名字，用于区分容器</span></span><br><span class="line">-d 后台方式运行 </span><br><span class="line">-it 使用交互方式运行，可以进入容器查看内容</span><br><span class="line">-p 指定容器的端口 如-p:8080:8080</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p :主机端口:容器端口（常用方式）</span><br><span class="line">-p 容器端口</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span>：容器停止运行后，自动删除容器文件</span><br></pre></td></tr></table></figure><ul><li>如果在docker  run后面追加-d=true或者-d，那么容器将会运行在后台模式。此时所有I/O数据只能通过网络资源或者共享卷组来进行交互。因为容器不再监听你执行docker run的这个终端命令行窗口。但你可以通过执行<strong>docker  attach</strong>来重新附着到该容器的会话中。</li><li>在前台模式下（不指定-d参数即可），Docker会在容器中启动进程，同时<strong>将当前的命令行窗口附着到容器的标准输入、标准输出和标准错误中</strong>。也就是说容器中所有的输出都可以在当前窗口中看到。甚至它都可以虚拟出一个TTY窗口，来执行信号中断。</li></ul><p>比如进入centos容器查看文件并退出：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210423160454.png" alt="image-20200617104004004" style="zoom: 67%;" /><h4 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看曾经运行的容器</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器停止退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器不停止退出 注意必须在英文输入法下，中文输入法不行</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure><p>比如退出再进入容器（我发现使用了Ctrl + P + Q退出之后，exit退出也不能停止容器了）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 按下Ctrl + P + Q</span></span></span><br><span class="line">[root@bfcea13c40cd /]# [root@192 ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f73e417ed8e4   centos    &quot;/bin/bash&quot;   2 minutes ago   Up 2 minutes             frosty_wilson</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>注意：<strong>正在运行的容器不能删除！！！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定容器 不能删除正在运行的容器，如果强制删除 <span class="built_in">rm</span> -f</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">docker ps -a -q|xargs docker rm</span><br></pre></td></tr></table></figure><h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span>/容器name  <span class="comment"># 已创建但是停止的容器可以通过这个命令启动</span></span><br><span class="line"></span><br><span class="line">docker restart 容器<span class="built_in">id</span>/容器name</span><br><span class="line"></span><br><span class="line">docker stop 容器<span class="built_in">id</span>/容器name  <span class="comment"># 对于已启动的容器通过这个命令停止</span></span><br></pre></td></tr></table></figure><h4 id="在容器中执行命令"><a href="#在容器中执行命令" class="headerlink" title="在容器中执行命令"></a>在容器中执行命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>比如进入centos：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment">### 按下Ctrl + P + Q</span></span><br><span class="line">[root@bfcea13c40cd /]<span class="comment"># [root@192 ~]# docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f73e417ed8e4   centos    <span class="string">&quot;/bin/bash&quot;</span>   2 minutes ago   Up 2 minutes             frosty_wilson</span><br><span class="line">[root@192 ~]<span class="comment"># docker exec -it f73e417ed8e4 /bin/bash   ### 再次进入</span></span><br></pre></td></tr></table></figure><h3 id="部署nginx"><a href="#部署nginx" class="headerlink" title="部署nginx"></a>部署nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">f7ec5a41d630: Already exists </span><br><span class="line">aa1efa14b3bf: Pull complete </span><br><span class="line">b78b95af9b17: Pull complete </span><br><span class="line">c7d6bca2b8dc: Pull complete </span><br><span class="line">cf16cd8e71e0: Pull complete </span><br><span class="line">0241c68333ef: Pull complete </span><br><span class="line">Digest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       87eca374c0ed   2 weeks ago    447MB</span><br><span class="line">nginx         latest    62d49f9bab67   3 weeks ago    133MB</span><br><span class="line">hello-world   latest    d1165f221234   2 months ago   13.3kB</span><br><span class="line">centos        latest    300e315adb2f   4 months ago   209MB</span><br><span class="line"><span class="comment"># 创建并启动容器 -d 后台运行(前台运行会显示输出)，--name 命名，-p 暴露端口，3344服务器、宿主机的端口，容器内部端口</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker run -d --name nginx01 -p:3344:80 nginx</span></span><br><span class="line">7b8e0497226d6138fdef504b5dad6105ec96d2d2a11695f3451418fa72919c74</span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">7b8e0497226d   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   8 seconds ago   Up 7 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="comment"># 使用3344可以访问成功</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># curl localhost:3344</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果需要修改配置文件或者网页文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@cdfgroup ~]<span class="comment"># docker exec -it nginx01 /bin/bash</span></span><br><span class="line"><span class="comment"># 查一下nginx在哪</span></span><br><span class="line">root@7b8e0497226d:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line"><span class="comment"># 到这个目录</span></span><br><span class="line">root@7b8e0497226d:/<span class="comment"># cd /etc/nginx</span></span><br><span class="line">root@7b8e0497226d:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d  fastcgi_params  koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params  uwsgi_params  win-utf</span><br><span class="line"><span class="comment"># 之后修改nginx.conf文件</span></span><br></pre></td></tr></table></figure><p>每次改动都需要进入容器内部，十分麻烦。而且<strong>docker是要将应用和环境打包成一个镜像</strong>，这样，<strong>数据就不应该在容器中</strong>，否则容器删除，数据就会丢失。</p><p>使用数据卷技术可以实现容器之间数据共享，数据双向同步。</p><p>直接用命令来挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v</span><br><span class="line"><span class="comment"># -v volume卷技术</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.ruanyifeng.com/blog/2018/02/nginx-docker.html">https://www.ruanyifeng.com/blog/2018/02/nginx-docker.html</a></p><p>新建文件夹进入(/root/nginx-docker-demo)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> nginx-docker-demo</span><br><span class="line"><span class="built_in">cd</span> nginx-docker-demo</span><br></pre></td></tr></table></figure><p><strong>从docker容器里面拷贝文件到主机：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器名:容器文件路径 主机文件路径</span><br></pre></td></tr></table></figure><p><strong>从主机拷贝文件到docker容器：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 主机文件路径 容器名:容器文件路径</span><br></pre></td></tr></table></figure><p>拷贝网页文件到当前文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nginx01:/usr/share/nginx/html .</span><br></pre></td></tr></table></figure><p>拷贝配置文件到当前文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nginx01:/etc/nginx .</span><br></pre></td></tr></table></figure><p>改名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> nginx conf</span><br></pre></td></tr></table></figure><p>挂载的方式启动（注意：这时候启动必须在创建的文件夹下，否则找不到配置文件就不会启动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--<span class="built_in">rm</span> \</span><br><span class="line">--name mynginx \</span><br><span class="line">--volume <span class="string">&quot;<span class="variable">$PWD</span>/html&quot;</span>:/usr/share/nginx/html \</span><br><span class="line">--volume <span class="string">&quot;<span class="variable">$PWD</span>/conf&quot;</span>:/etc/nginx \</span><br><span class="line">-p 3366:80 \</span><br><span class="line">-d \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>终止容器：（把这个容器终止，由于<code>--rm</code>参数的作用，容器文件会自动删除）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mynginx</span><br></pre></td></tr></table></figure><h3 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker pull tomcat:9.0</span></span><br><span class="line">9.0: Pulling from library/tomcat</span><br><span class="line">bd8f6a7501cc: Pull complete </span><br><span class="line">44718e6d535d: Pull complete </span><br><span class="line">efe9738af0cb: Pull complete </span><br><span class="line">f37aabde37b8: Pull complete </span><br><span class="line">b87fc504233c: Pull complete </span><br><span class="line">8bf93eef8c9e: Pull complete </span><br><span class="line">8d33b4df10ef: Pull complete </span><br><span class="line">2d77aa1a5442: Pull complete </span><br><span class="line">baa04cc4071d: Pull complete </span><br><span class="line">a3a752513415: Pull complete </span><br><span class="line">Digest: sha256:0509684774ac53d8b152f4a50dd92889218a8633c0feddb4b35d092e55cd215d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> tomcat:9.0</span><br><span class="line">docker.io/library/tomcat:9.0</span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">tomcat        9.0       c0e850d7b9bb   13 days ago    667MB</span><br><span class="line">mysql         5.7       87eca374c0ed   2 weeks ago    447MB</span><br><span class="line">nginx         latest    62d49f9bab67   3 weeks ago    133MB</span><br><span class="line">hello-world   latest    d1165f221234   2 months ago   13.3kB</span><br><span class="line">centos        latest    300e315adb2f   4 months ago   209MB</span><br><span class="line"><span class="comment"># 务必加上版本号，否则会自动下载最新版运行</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker run -d -p 3355:8080 --name tomcat01 tomcat:9.0</span></span><br><span class="line">fb26f874d72d67ad7210ab9c186d11b5f3f4d3cf4728459f3f5864f70988b0d9</span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">fb26f874d72d   tomcat:9.0   <span class="string">&quot;catalina.sh run&quot;</span>   8 seconds ago   Up 7 seconds   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># curl localhost:3355</span></span><br><span class="line">&lt;!doctype html&gt;&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;&lt;<span class="built_in">head</span>&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:<span class="comment">#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/9.0.45&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment"># 发现并没有访问到tomcat的页面，报错404</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work</span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line"><span class="comment"># 可以发现webapps下什么都没有</span></span><br><span class="line"><span class="comment"># 这是阿里云镜像的原因：默认使用最小镜像，所有不必要的都剔除了，保证最小可运行环境</span></span><br><span class="line"><span class="comment"># 实际上东西都在 webapps.dist里面</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat/webapps<span class="comment"># cd ..</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat<span class="comment"># cp -r webapps.dist/* webapps</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="comment"># Ctrl + P + Q 退出当前容器</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># curl localhost:3355</span></span><br><span class="line"><span class="comment"># 这个时候就可以访问到了</span></span><br></pre></td></tr></table></figure><p>webapps文件的挂载和nginx是一样的。这里我把war包拷贝到docker容器中运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker cp /www/report_pdf/kaoping.war tomcat01:/usr/local/tomcat/webapps</span></span><br><span class="line">[root@iZ8vbb58nh9e5zf1j0dbg2Z ~]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@fb26f874d72d:/usr/local/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  kaoping  kaoping.war  manager</span><br></pre></td></tr></table></figure><h3 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql5.7</span><br><span class="line"></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置 安装启动mysql需要配置密码</span><br><span class="line">--name 容器名字</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="可视化管理"><a href="#可视化管理" class="headerlink" title="可视化管理"></a>可视化管理</h3><p><strong>portainer</strong>可视化工具。</p><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3350:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure><p>第一次运行会要求创建账户密码。</p><p>创建完成后如下：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210508172439.png" alt="image-20210508172439382" style="zoom:80%;" /><p>点击<code>connect</code>就能连上本地仓库。</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>dockerfile是用来构建docker镜像的文件，命令参数脚本。</p><p>很多官方镜像都是基础包，很多功能没有(比如centos没有vim、ipconfig)，我们通常会配置环境和软件自己搭建镜像。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220502211715.png" alt="image-20210909110000357" style="zoom: 50%;" /><p>常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM   # 基础镜像，一切从这里开始构建 centos</span><br><span class="line">MAINTAINER    # 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN    # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD    # 放入一些文件如一个tomcat压缩包，会自动解压</span><br><span class="line">WORKDIR  # 镜像的工作目录</span><br><span class="line">VOLUME   # 挂载的目录</span><br><span class="line">EXPOST   # 默认端口配置</span><br><span class="line">CMD   # 指定容器启动的时候要运行的命令,只有最后一个会生效，可被替代</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMD 一行只执行一个命令，写多个CMD都会执行</span></span><br><span class="line">ENTRYPOINTY  # 指定容器启动的时候要运行的命令,可以追加命令</span><br><span class="line">ONBUILD   # 当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令</span><br><span class="line">COPY    # 类似ADD命令，将文件拷贝到镜像中</span><br><span class="line">ENV     # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><p>构建自己的centos：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER xiaoshi&lt;1209001368@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"><span class="comment"># echo 输出信息</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;----END----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>构建命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile文件路径 -t 镜像名:[版本号] .</span><br><span class="line"></span><br><span class="line">docker build -f mydockerfile -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><ul><li><p>**-f :**指定要使用的Dockerfile路径；</p></li><li><p><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；</p></li><li><p>最后的 <strong>.</strong> 号，指定镜像构建过程中的上下文环境的目录</p></li></ul><p>Docker 在运行时分为 Docker引擎（服务端守护进程） 以及 客户端工具，我们日常使用各种 docker 命令，其实就是在使用客户端工具与 Docker 引擎 进行交互。</p><p>那么当我们使用 docker build 命令来构建镜像时，这个构建过程其实是在 Docker引擎 中完成的，而不是在本机环境。</p><p>那么如果在 Dockerfile 中使用了一些 COPY 等指令来操作文件，如何让 Docker引擎 获取到这些文件呢？</p><p>这里就有了一个镜像构建上下文的概念，<strong>当构建的时候，由用户指定构建镜像的上下文路径，而 docker build  会将这个路径下所有的文件都打包上传给 Docker  引擎</strong>，引擎内将这些内容展开后，就能获取到所有指定上下文中的文件了。</p><p>比如说 dockerfile 中的 COPY ./package.json /project，其实拷贝的并不是本机目录下的 package.json 文件，而是 docker引擎中展开的构建上下文中的文件。</p><p> .dockerignore 文件就是忽略某些文件。</p><p>查看构建历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> docker镜像名/id</span><br></pre></td></tr></table></figure><h3 id="SpringBoot微服务打包镜像"><a href="#SpringBoot微服务打包镜像" class="headerlink" title="SpringBoot微服务打包镜像"></a>SpringBoot微服务打包镜像</h3><ol><li>项目打包jar</li><li>编写dockerfile</li><li>构建镜像</li><li>发布运行</li></ol><p>最后交付的就是一个镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--SERVER.PORT=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p:8080:8080 --name demo_sqlserver server_demo_sqlserver</span><br></pre></td></tr></table></figure><p>如果最后有很多镜像，比如上百个，集群如何管理？</p><p>这就要用：</p><p>Docker Compase</p><p>Docker Swarm</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker  容器集群的快速编排。使用前面介绍的Dockerfile我们很容易定义一个单独的应用容器。然而在日常开发工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web  服务容器本身，往往还需要再加上后端的数据库服务容器；再比如在分布式应用一般包含若干个服务，每个服务一般都会部署多个实例。如果每个服务都要手动启停，那么效率之低、维护量之大可想而知。这时候就需要一个工具能够管理一组相关联的的应用容器，这就是Docker Compose。</p><p>参考：<a href="https://baijiahao.baidu.com/s?id=1659023590103934059&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1659023590103934059&amp;wfr=spider&amp;for=pc</a></p><p><strong>安装docker-compose</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-compose  //安装命令</span><br><span class="line">docker-compose -v           //验证安装</span><br></pre></td></tr></table></figure><h3 id="Windows的坑"><a href="#Windows的坑" class="headerlink" title="Windows的坑"></a>Windows的坑</h3><p>Windows有一个Docker Desktop桌面版软件，电脑如果安装了VM虚拟机，再安装Docker就会导致VM虚拟机不能用。</p><p>参考：<a href="https://www.freesion.com/article/6760723270/">https://www.freesion.com/article/6760723270/</a></p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220527153447.png" alt="image-20220527153440880"></p><p>我首先是卸载了Docker</p><p>之后由于win10家庭教育版没有“Hyper-V”</p><p>直接命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p><strong>解决方案是在windows上安装wsl，在wsl里面通过命令安装docker</strong>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程环境配置指南</title>
      <link href="/2022/04/23/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
      <url>/2022/04/23/%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h3><p><code>IDEA</code>  Java IDE  （社区版免费，但是不支持<code>spring</code>，需要单独安装<code>Java</code>运行环境和<code>Maven</code>）</p><p><code>WebStrom</code>  前端 IDE  （需要单独安装<code>Node</code>、<code>WebPack</code>、<code>vue-cli</code>等）</p><p><code>PyCharm</code>  Python IDE  （社区版免费，需要单独安装<code>Python</code>、<code>Anacanda</code>等）</p><p><code>Android Studio</code>  Android 开发</p><p><code>Navicat</code>  数据库连接</p><p><code>secureCRT</code>  SSH连接</p><p><code>Postman</code>  测试后台接口</p><p><code>Sublime</code>  查看代码  （需要再装个格式化代码的插件<a href="https://www.cnblogs.com/wghao/p/6026107.html">CodeFormatter</a>）</p><p><code>Visual Studio Code</code> 查看代码</p><p><code>Typora + PicGo</code>  写笔记，图片上传gitee图床（PigGo需要装gitee插件，gitee建立仓库配置token，<a href="https://blog.csdn.net/disILLL/article/details/103962241?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">参考</a>，不过现在推荐阿里云OSS）</p><p><code>Git</code>  代码版本控制  （不会命令行的话可以辅助安装<code>TortoiseGit</code>）</p><p><code>Windows Terminal</code> 命令行 （Win + R 输入wt打开，在文件夹下输入<code>wt -d . </code>打开）</p><p><code>Visual Studio 2019</code>  C C++ C# IDE</p><p><code>微信开发者工具</code>  用于开发微信小程序</p><p><code>IDEA</code>个性化设置及插件：装两个插件<code>Lombok</code>和<a href="https://blog.csdn.net/cnds123321/article/details/102858985"><code>Background Image Plus</code></a>。</p><p><code>Visual Studio Code</code> 个性化设置及插件</p><p><code>Visual Studio 2019</code>个性化设置及插件（<code>XAML Style</code>、<code>CodeMaid</code>、<code>Output enhancer</code>）</p><p>视频播放器：<code>VLC media player</code>和<code>PotPlayer</code></p><p><a href="https://zhuanlan.zhihu.com/p/35757176">PotPlayer播放器个性化设置</a></p><p><code>dism++</code>对系统进行个性化设置</p><p><code>RightMenuMgr</code>对系统右键菜单进行个性化设置</p><span id="more"></span><h4 id="git的安装和使用"><a href="#git的安装和使用" class="headerlink" title="git的安装和使用"></a>git的安装和使用</h4><p>详细安装教程（一般来说全部默认就可以了）：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>首先设置本地git账户：</p><ol><li>查看用户名和邮箱地址：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name </span><br><span class="line"></span><br><span class="line">git config user.email </span><br></pre></td></tr></table></figure><ol start="2"><li>修改用户名和邮箱地址：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>之后的使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> url  // 从远程克隆</span><br><span class="line"></span><br><span class="line">git init  // 初始化本地仓库</span><br><span class="line"></span><br><span class="line">git add .  // 添加所有文件到暂存区</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;描述&quot;</span>  // 将暂存区的文件一次性提交到工作区</span><br><span class="line"></span><br><span class="line">git remote add origin <span class="string">&#x27;远程仓库地址&#x27;</span>  // 关联远程仓库</span><br><span class="line"></span><br><span class="line">git push -u origin master  // 第一次推</span><br><span class="line"> </span><br><span class="line">git push origin master  // 推送</span><br><span class="line"></span><br><span class="line">git pull origin master  // 拉取</span><br></pre></td></tr></table></figure><p>笔记文件git仓库：<a href="https://gitee.com/xiaoshihd/mynote.git">https://gitee.com/xiaoshihd/mynote.git</a></p><h4 id="Node-js的安装和使用"><a href="#Node-js的安装和使用" class="headerlink" title="Node.js的安装和使用"></a>Node.js的安装和使用</h4><p>参考这个：<a href="https://www.npmjs.cn/getting-started/what-is-npm/">https://www.npmjs.cn/getting-started/what-is-npm/</a></p><p>安装一般也都是全部默认即可。安装完成之后自带npm包管理器。</p><p>node查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>新建helloworls.js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>); </span><br></pre></td></tr></table></figure><p>node直接运行js文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node helloworld.js</span><br></pre></td></tr></table></figure><p>npm查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装完成之后尽量更新一下npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@latest -g. </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><p>之后换国内镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>配置后可通过下面方式来验证是否成功：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>如果不需要了还可以切换回官方镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>或者使用cnpm（之后的下载安装命令都换为cnpm）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol><li>全局安装包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g // 或者 npm install webpack --global</span><br></pre></td></tr></table></figure><p>包安装在Node安装目录下的node_modules文件夹中，一般在 <code>C:\Users\用户名\AppData\Roaming\npm\node_modules</code> 目录下，可以使用以下命令查看全局安装目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure><p>全局安装后可以供命令行(command line)使用，用户可以在命令行中直接运行该组件包支持的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update -g webpack    // 全局更新包</span><br><span class="line"></span><br><span class="line">npm uninstall -g webpack  // 卸载全局包</span><br></pre></td></tr></table></figure><ol start="2"><li>本地安装包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts</span><br><span class="line"></span><br><span class="line">npm install echarts --save  // 或者 npm install echarts -S</span><br><span class="line"></span><br><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><p>执行该命令后会在当前目录生成<code>node_modules</code>文件夹，包安装在这个文件夹下。</p><p><code>package-lock.json</code>文件也是自动生成的，记录安装包的信息。</p><p>如果在本地目录中没有 <code>package.json</code> 这个文件的话，那么最新版本的包会被安装。如果存在 <code>package.json</code> 文件，则会在 <code>package.json</code> 文件中查找符合规则的最新版本。</p><p>package.json文件需要手动创，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init   </span><br><span class="line"></span><br><span class="line">npm init --<span class="built_in">yes</span>  // 创建默认的package.json</span><br></pre></td></tr></table></figure><p>执行<code>npm run 命令</code>，<code>package.json</code>中的<code>scripts</code>会按照一定顺序寻找对应命令的位置。</p><p>参数<code>--save</code>的含义是代表把你的安装包信息写入package.json文件的<code>dependencies</code>字段中。</p><p>参数<code>--save-dev</code>的含义是代表把你的安装包信息写入package.json文件的<code>devDependencies</code>字段中。</p><p>这两个字段的作用就是方便根据<code>package.json</code>文件安装依赖包。比如拿到别人的项目：</p><ul><li>需要安装之前package.json中devDpendencies 和 dependencies两个模块下所列举的依赖：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>只需要安装之前package.json中dependencies 模块下所列举的依赖：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure><ul><li>只需要安装之前package.json中devdependencies 模块下所列举的依赖：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename -dev</span><br></pre></td></tr></table></figure><p>本地更新包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update echarts</span><br></pre></td></tr></table></figure><p>本地卸载包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall echarts</span><br></pre></td></tr></table></figure><p>如需从 <code>package.json</code> 文件中删除依赖，需要在命令后添加参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall --save echarts</span><br><span class="line"></span><br><span class="line">npm uninstall --save-dev echarts</span><br></pre></td></tr></table></figure><p><strong>搭建Vue开发环境：</strong></p><ol><li>安装webpack：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><ol start="2"><li>安装vue-cli</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure><p>验证命令：<code>vue -V</code></p><p>如果提示“在此系统上禁用脚本”，以管理员身份打开命令提示符，输入以下命令开启即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned </span><br></pre></td></tr></table></figure><p>创建Vue项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue-demo //项目名</span><br></pre></td></tr></table></figure><h4 id="Python的安装和使用"><a href="#Python的安装和使用" class="headerlink" title="Python的安装和使用"></a>Python的安装和使用</h4><p>Python安装的时候注意勾选添加环境变量。安装的时候自带pip包管理工具。</p><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br><span class="line"></span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure><p><strong>升级 pip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure><p><strong>pip换源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage -i https://pypi.tuna.tsinghua.edu.cn/simple  <span class="comment"># 临时</span></span><br><span class="line"></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple <span class="comment"># 永久</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config list  <span class="comment"># 查看当前源</span></span><br></pre></td></tr></table></figure><p>pip的安装包一般在：<code>C:\Users\用户名\AppData\Local\Programs\Python\PythonXX\Lib\site-packages</code>下面。</p><p><strong>安装包</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage              # 最新版本</span><br><span class="line">pip install SomePackage==1.0.4       # 指定版本</span><br><span class="line">pip install &#x27;SomePackage&gt;=1.0.4&#x27;     # 最小版本</span><br></pre></td></tr></table></figure><p><strong>升级包</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure><p>升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号。</p><p><strong>卸载包</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall SomePackage</span><br></pre></td></tr></table></figure><p><strong>搜索包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search SomePackage</span><br></pre></td></tr></table></figure><p><strong>显示安装包信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show </span><br></pre></td></tr></table></figure><p><strong>查看指定包的详细信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show -f SomePackage</span><br></pre></td></tr></table></figure><p><strong>列出已安装的包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p><strong>查看可升级的包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list -o</span><br></pre></td></tr></table></figure><h4 id="Anaconda的安装和使用"><a href="#Anaconda的安装和使用" class="headerlink" title="Anaconda的安装和使用"></a>Anaconda的安装和使用</h4><p>anaconda安装的时候也是要注意一下勾选添加环境变量的选项。</p><p>推荐直接安装这个，要不然用到什么包都pip安装，偶尔还报错烦死你。而且anaconda安装进来后就已经安装了python、pip和conda。</p><h4 id="Java的安装和使用"><a href="#Java的安装和使用" class="headerlink" title="Java的安装和使用"></a>Java的安装和使用</h4><p>从<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle的官网</a>下载 JDK安装，<strong>推荐1.8版本</strong>。</p><p>安装完成后设置环境变量：</p><p>设置一个<code>JAVA_HOME</code>的系统环境变量，它指向JDK的安装目录。</p><p>通常Eclipse/IntelliJ Idea/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk-14</span><br></pre></td></tr></table></figure><p>然后，把<code>JAVA_HOME</code>的<code>bin</code>目录附加到系统环境变量<code>PATH</code>上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br></pre></td></tr></table></figure><p>把<code>JAVA_HOME</code>的<code>bin</code>目录添加到<code>PATH</code>中是为了在任意文件夹下都可以运行<code>java</code>。打开命令提示符窗口，输入命令<code>java -version</code>，即可看到版本信息。</p><p><code>bin</code>目录下的<code>java</code>可执行程序其实就是JVM，<strong>运行Java程序，就是启动JVM</strong>，然后让JVM执行指定的编译后的代码。</p><p>之后设置<code>CLASSPATH</code>系统环境变量:</p><p>JDK在默认情况下会到当前工作目录下(变量值用“<code>.</code>”表示)以及JDK的lib目录下寻找所需的class文件，因此如果Java程序放在这两个目录中，即使不设置CLASSPATH变量执行环境也可以找得到。但是如果Java程序放在其他目录下，运行时则需要设置CLASSPATH变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar</span><br></pre></td></tr></table></figure><h4 id="Maven的安装和使用"><a href="#Maven的安装和使用" class="headerlink" title="Maven的安装和使用"></a>Maven的安装和使用</h4><p>IDEA安装的时候其实自带的有maven，也就是下面这个：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210420150134.png" alt="image-20210420150127109"></p><p>但是建议自己安装配置，用起来比较靠谱，<strong>推荐3.6.1版本</strong>。</p><p>设置使用本地maven：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210420150756.png" alt="image-20210420150756608"></p><ol><li>前往<a href="https://maven.apache.org/download.cgi%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84Maven%E7%A8%8B%E5%BA%8F%EF%BC%9A">https://maven.apache.org/download.cgi下载最新版的Maven程序：</a></li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210415215503.png" alt="20190603100924625" style="zoom:80%;" /><ol start="2"><li><p>将文件解压到<code>C:\Program Files\Apache\</code>目录下:</p></li><li><p>新建环境变量<code>MAVEN_HOME</code>，赋值<code>D:\Program Files\Apache\apache-maven-3.8.1</code></p></li><li><p>编辑环境变量Path，追加<code>%MAVEN_HOME%\bin</code></p></li><li><p><code>mvn --version</code>查看是否安装成功</p></li></ol><p>maven安装目录下的<code>conf\settings.xml</code>文件是maven的配置文件。</p><p><strong>配置本地仓库</strong>：</p><p>localRepository节点用于配置本地仓库，默认是注释掉的，它的默认地址是 <code>C:\Users\用户名\.m2\repository</code>。</p><p>如果有需要可以进行更改到指定文件夹（<strong>路径不要有空格和中文</strong>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven下载依赖由于要访问国外服务器，所以有时候会很慢。需要配置中央仓库：</p><p>官方文档：<a href="https://help.aliyun.com/document_detail/102512.html?spm=a2c40.aliyun_maven_repo.0.0.36183054eGk3vS">https://help.aliyun.com/document_detail/102512.html?spm=a2c40.aliyun_maven_repo.0.0.36183054eGk3vS</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果有问题，就在IDEA里面配置忽略ssl证书的验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure=<span class="literal">true</span> -Dmaven.wagon.http.ssl.allowall=<span class="literal">true</span></span><br></pre></td></tr></table></figure><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210416205901.png" alt="2020022719493843" style="zoom:80%;" /><p>mevan官方仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>要找仓库的地址可以在这里找。</p><p>比如mybatis：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="GCC的安装和使用"><a href="#GCC的安装和使用" class="headerlink" title="GCC的安装和使用"></a>GCC的安装和使用</h4><p>下载地址：<a href="https://sourceforge.net/projects/mingw/files/latest/download">https://sourceforge.net/projects/mingw/files/latest/download</a></p><p>下载进来之后在线安装，全部勾选：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210901211334.png" alt="image-20210901211334534"></p><p>点击 Installation &gt; Apply Changes ，等待安装完成。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210901212022.png" alt="image-20210901212022932" style="zoom:80%;" /><p>把<code>C:\MinGW\bin</code>添加到环境变量。在cmd命令提示符里面输入 gcc –help 回车查看是否安装成功。</p><p>上面这个安装方式太慢了，我还是下载codeblocks吧。</p><p>下载链接：<a href="https://www.codeblocks.org/downloads/binaries/">https://www.codeblocks.org/downloads/binaries/</a></p><p>选择codeblocks-20.03mingw-nosetup.zip</p><p>解压后把 <code>D:\CodeBlocks\MinGW\bin</code>加到系统变量里的path里。</p><p>gcc 命令编译格式 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o <span class="built_in">test</span> </span><br></pre></td></tr></table></figure><p>之后直接输入test即可运行。</p><p>对于C++：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ test.cpp -o test2 </span><br></pre></td></tr></table></figure><p>用gcc(g++)编译器 执行-o（链接命令，（其实包括了编译，汇编，链接）），指定test(test2)作为输出的exe的文件名，对test.c(test.cpp)执行。</p><p>-S是输出的.s文件（将c语言编译成汇编语言），</p><p>-c是输出.o文件（将汇编语言汇编成目标文件），</p><p>-o就是输出.exe文件了（将目标文件链接，输出exe文件）</p><h4 id="Sublime-Text教程"><a href="#Sublime-Text教程" class="headerlink" title="Sublime Text教程"></a>Sublime Text教程</h4><p>基础配置：Preferences/Setting</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ignored_packages&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;Vintage&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;font_size&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;update_check&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;show_encoding&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;show_line_endings&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>插件配置：使用快捷键 “ Ctl+Shift+P ”，再选择 “<strong>Package Control: Install Package</strong>“</p><p>等待列出可安装的插件列表，输入”==CodeFormatter==”找到它，并点击即可安装。</p><p>CodeFormatter插件能支持常见的几种编程语言格式化：</p><ul><li>PHP </li><li>JavaScript/JSON </li><li>HTML</li><li>CSS </li><li>SCSS </li><li>Python</li><li>Visual Basic/VBScript</li><li>Coldfusion/Railo/Lucee</li></ul><p><strong>Ctrl+Alt+F</strong>格式化快捷键。</p><p>C、C++、C#、Java使用==SublimeAStyleFormatter==</p><p>根据自己的编程环境需要，可通过”Preferences &gt; package setttings &gt; codeFormatter &gt; settings-user“设置一些参数，如PHP的安装路径。 </p><p>Sublime text不支持GB2312和GBK编码，汉会被当成UTF-8编码进行转换，就会出现乱码。这个时候可以安装插件==ConvertToUTF8==。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python离散数据处理</title>
      <link href="/2022/04/23/Python%E7%A6%BB%E6%95%A3%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/23/Python%E7%A6%BB%E6%95%A3%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Python数据处理"><a href="#Python数据处理" class="headerlink" title="Python数据处理"></a>Python数据处理</h2><p><strong>Scipy数学处理模块</strong></p><p><a href="https://docs.scipy.org/doc/scipy/reference/index.html">https://docs.scipy.org/doc/scipy/reference/index.html</a></p><table><thead><tr><th align="left">模块</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">scipy.cluster</td><td align="left">矢量量化 / K-均值</td></tr><tr><td align="left">scipy.constants</td><td align="left">物理和数学常数</td></tr><tr><td align="left">==scipy.fftpack==</td><td align="left">傅里叶变换</td></tr><tr><td align="left">==scipy.integrate==</td><td align="left">积分程序</td></tr><tr><td align="left">scipy.interpolate</td><td align="left">插值</td></tr><tr><td align="left">==scipy.io==</td><td align="left">数据输入输出，支持多种类型文件读写</td></tr><tr><td align="left">scipy.linalg</td><td align="left">线性代数程序</td></tr><tr><td align="left">scipy.ndimage</td><td align="left">n维图像包</td></tr><tr><td align="left">scipy.odr</td><td align="left">正交距离回归</td></tr><tr><td align="left">scipy.optimize</td><td align="left">优化</td></tr><tr><td align="left">==scipy.signal==</td><td align="left">信号处理</td></tr><tr><td align="left">scipy.sparse</td><td align="left">稀疏矩阵</td></tr><tr><td align="left">scipy.spatial</td><td align="left">空间数据结构和算法</td></tr><tr><td align="left">scipy.special</td><td align="left">任何特殊数学函数</td></tr><tr><td align="left">scipy.stats</td><td align="left">统计</td></tr></tbody></table><span id="more"></span><p><strong>numpy模块</strong></p><p><a href="https://numpy.org/doc/stable/reference/index.html#reference">https://numpy.org/doc/stable/reference/index.html#reference</a></p><h3 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h3><p><strong>梯形规则</strong>：</p><p>梯形积分只有1阶代数精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.integrate.trapezoid(y, x=<span class="literal">None</span>, dx=<span class="number">1.0</span>, axis=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>辛普森规则</strong>：</p><p>对于等间距的奇数个样本，如果函数是 3 阶或更小的多项式，则结果是精确的。如果样本不是等间距的，那么只有当函数是 2 阶或更小的多项式时，结果才是准确的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scipy.integrate.simps(y, x=<span class="literal">None</span>, dx=<span class="number">1</span>, axis=-<span class="number">1</span>, even=<span class="string">&#x27;avg&#x27;</span>)</span><br><span class="line"><span class="comment"># even = &#123;‘avg’, ‘first’, ‘last’&#125;</span></span><br><span class="line"><span class="comment"># avg：平均first和last两个结果 默认参数</span></span><br><span class="line"><span class="comment"># first：对前N-2个区间使用Simpson规则，最后一个区间使用梯形规则</span></span><br><span class="line"><span class="comment"># last：对后N-2个区间使用Simpson规则，第一个区间使用梯形规则</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> simps</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> trapz</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">z= trapz(y,x)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">z= simps(y,x,even=<span class="string">&#x27;last&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">4</span>]</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="number">2.6666666666666665</span></span><br></pre></td></tr></table></figure><p>加速度计积分</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220308115529.png" alt="image-20220308115529357"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> simps</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示符号</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">21</span>) * <span class="number">2</span> * np.pi / <span class="number">20</span></span><br><span class="line"><span class="comment"># y = np.sin(x) + np.random.rand(x.size) * 0.1</span></span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">v = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    v.append(simps(y[:i + <span class="number">1</span>], x[:i + <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    s.append(simps(v[:i + <span class="number">1</span>], x[:i + <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib官方提供了五种不同的图形风格，分别是：bmh、ggplot、dark_background、fivethirtyeight 和 grayscale</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.figure() # 创建一个画图窗口，可配置num图名、figsize画布大小、facecolor背景色、edgecolor边缘色</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>)  <span class="comment"># 将画布划分为1行3列</span></span><br><span class="line">plt.title(<span class="string">&quot;加速度曲线&quot;</span>)  <span class="comment"># 设置图表的标题</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;a(m/s^2)&#x27;</span>)  <span class="comment"># 设置坐标轴的标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;t(s)&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>)  <span class="comment"># 设置坐标轴的刻度范围</span></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># plt.xticks(np.linspace(0,10,5),rotation=45) # 设置坐标轴刻度信息，rotation表示旋转</span></span><br><span class="line"><span class="comment"># plt.legend() # 设置显示图例，loc参数设置图例显示的位置</span></span><br><span class="line"><span class="comment"># 移动坐标轴，spines为脊梁，即4个边框</span></span><br><span class="line">ax = plt.gca()  <span class="comment"># get current axis 得到当前的坐标轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置右‘脊梁’消失掉</span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置上‘脊梁’消失掉</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&#x27;bottom&#x27;</span>)  <span class="comment"># 底部‘脊梁’设置为X轴</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&#x27;left&#x27;</span>)  <span class="comment"># 左部‘脊梁’设置为Y轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  <span class="comment"># 底部‘脊梁’移动位置，通过值来选择，x轴值为o的位置</span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  <span class="comment"># 左部‘脊梁’移动位置，y轴值为0的位置</span></span><br><span class="line"><span class="comment"># 绘制折线图，参数color表示颜色，label图例，linestyle曲线风格，linewidth曲线宽度，marker标记点样式，markersize标记点大小</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y.size):</span><br><span class="line">    plt.plot([x[i], x[i]], [y[i], <span class="number">0</span>], color=<span class="string">&#x27;#666666&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;速度曲线&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;v(m/s)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;t(s)&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>)  <span class="comment"># 设置坐标轴的刻度范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">ax = plt.gca()  <span class="comment"># get current axis 得到当前的坐标轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置右‘脊梁’消失掉</span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置上‘脊梁’消失掉</span></span><br><span class="line">plt.plot(x, v, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y.size):</span><br><span class="line">    plt.plot([x[i], x[i]], [v[i], <span class="number">0</span>], color=<span class="string">&#x27;#666666&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&quot;位移曲线&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;s(m)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;t(s)&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>)  <span class="comment"># 设置坐标轴的刻度范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">ax = plt.gca()  <span class="comment"># get current axis 得到当前的坐标轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置右‘脊梁’消失掉</span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 设置上‘脊梁’消失掉</span></span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y.size):</span><br><span class="line">    plt.plot([x[i], x[i]], [s[i], <span class="number">0</span>], color=<span class="string">&#x27;#666666&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>参考：<a href="https://blog.csdn.net/l494926429/article/details/51818012">https://blog.csdn.net/l494926429/article/details/51818012</a></p><p><strong>正弦是一种自然摆动，象征着平滑</strong></p><p>正弦运动是变速的：开始快，慢慢减速直至停止，然后又开始加速。如同弹簧的弹跳，钟摆的摆动，琴弦的振动。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220321111100.gif" alt="v2-43f1a1684b302373b2c42a7fcb23198f_b"></p><p>正弦波可看做是一个圆周运动在一条直线上的投影。</p><p>x(t) = A sin(2 π f t + φ) = A sin(ω t  + φ)        </p><ul><li> A——振幅</li><li> (ωt+φ)——相位</li><li> φ——初相</li><li> ω——角速度，在单位时间内所走的弧度，ω=2π/T=2 π f</li><li> T——周期</li><li> f——频率，单位时间内完成周期性变化的次数，f=1/T</li><li> λ——波长，一个变化周期内传播的距离叫做波长，λ=vT，v指波速，电磁波传播速度与光速相同，为10^8米每秒</li></ul><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220321110304.png" alt="bcb52578f6419c3350bb31edccfc3838"></p><p>傅里叶变换是一种信号分析方法，可以把时域信号转为频域信号，让我们对信号的构成和特点进行深入的、定量的研究。把信号通过频谱的方式(包括幅值谱、相位谱和功率谱)进行准确的、定量的描述。</p><p>傅里叶变换的核心在于任何信号都可以表示成不同振幅，不同相位正弦信号的叠加。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220309211700.jpeg" alt="4bed2e738bd4b31c1d60e341d143c7799f2ff80c"></p><p>图中最前面黑色的线就是所有正弦波叠加而成的总和，也就是越来越接近矩形波的那个图形。而后面依不同颜色排列而成的正弦波就是组合为矩形波的各个分量。这些正弦波按照频率从低到高从前向后排列开来，而每一个波的振幅都是不同的。每两个正弦波之间都还有一条直线，那并不是分割线，而是振幅为 0 的正弦波！也就是说，为了组成特殊的曲线，有些正弦波成分是不需要的。</p><p>频域图像从侧面看。在频谱中，偶数项的振幅都是0，也就对应了图中的彩色直线。振幅为 0 的正弦波。</p><p>频谱并没有包含时域中全部的信息。因为频谱只代表每一个对应的正弦波的振幅是多少，而没有提到相位。基础的正弦波A.sin(wt+θ)中，振幅，频率，相位缺一不可，不同相位决定了波的位置，所以对于频域分析，仅仅有频谱（振幅谱）是不够的，我们还需要一个相位谱。</p><p>相位谱图像从上面看。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220309213034.png" alt="image-20220309213034209"></p><p>图中红点是距离频率轴最近的波峰，紫色为投影下的点。但是这些紫色的点是投影在时间轴上的，只标注了波峰距离频率轴的时间差，并不是相位。将时间差除周期再乘2Pi，就得到了相位差。</p><p>Scipy包含FFT实现，更底层和高效。</p><p>Numpy也有一个FFT(numpy.fft)实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fft.fft(a, n=<span class="literal">None</span>, axis=- <span class="number">1</span>, norm=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># norm = &#123;“backward”, “ortho”, “forward”&#125;</span></span><br><span class="line"><span class="comment"># 指示前向/后向变换对的哪个方向被缩放以及使用什么归一化因子</span></span><br><span class="line"><span class="comment"># 默认backward</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fft.ifft(a, n=<span class="literal">None</span>, axis=- <span class="number">1</span>, norm=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> numpy.fft <span class="keyword">as</span> fft</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采样点选择1000个，因为设置的信号频率分量最高为100赫兹，根据采样定理知采样频率要大于信号频率2倍</span></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直流分量是0.2，以及两个余弦函数的叠加，余弦函数的幅值分别为0.7和0.2，频率分别为50和100，初相位分别为20度和70度</span></span><br><span class="line">S = <span class="number">0.2</span> + <span class="number">0.7</span> * np.cos(<span class="number">2</span> * np.pi * <span class="number">50</span> * t + <span class="number">20</span> / <span class="number">180</span> * np.pi) + <span class="number">0.2</span> * np.cos(<span class="number">2</span> * np.pi * <span class="number">100</span> * t + <span class="number">70</span> / <span class="number">180</span> * np.pi)</span><br><span class="line"></span><br><span class="line">complex_array = fft.fft(S)  <span class="comment"># 傅里叶变换后的复数数组,变换之后的结果数据长度和原始采样信号是一样的</span></span><br><span class="line"><span class="built_in">print</span>(complex_array.shape)</span><br><span class="line"><span class="built_in">print</span>(complex_array.dtype)</span><br><span class="line"><span class="built_in">print</span>(complex_array[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 复数的模(绝对值)代表的是振幅，复数的辐角代表初相位</span></span><br><span class="line">pows = np.<span class="built_in">abs</span>(complex_array)  <span class="comment"># 振幅</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="comment"># 绘制数据采样图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>) <span class="comment"># 绘制网格线</span></span><br><span class="line">plt.plot(<span class="number">1000</span> * t[:<span class="number">100</span>], S[:<span class="number">100</span>], label=<span class="string">&#x27;S&#x27;</span>)  <span class="comment"># y是1000个相加后的正弦序列</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;t（毫秒）&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;S(t)幅值&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;叠加信号图&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment"># 绘制频谱图</span></span><br><span class="line"><span class="comment"># np.fft.fftfreq(采样数量, 采样周期)　　通过采样数与采样周期得到时域序列经过傅里叶变换后的频率序列</span></span><br><span class="line">freqs = fft.fftfreq(t.size, <span class="number">1</span>/<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(freqs.shape)</span><br><span class="line"><span class="comment"># 复数的模为信号的振幅（能量大小）</span></span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;FFT变换,频谱图&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Frequency 频率&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Power 振幅&#x27;</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">10</span>)  <span class="comment"># 刻度线样式</span></span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.plot(freqs[freqs &gt;= <span class="number">0</span>], pows[freqs &gt;= <span class="number">0</span>], c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.tight_layout()</span><br><span class="line"><span class="comment"># 频谱图中，第一个峰值（频率位置）的模是常数项A1的N倍，N为采样点，本程序显示为0.2*1000</span></span><br><span class="line"><span class="comment"># 第二个峰值（频率位置）的模是A2的N/2倍，N为采样点，0.7*500</span></span><br><span class="line"><span class="comment"># 第三个峰值（频率位置）的模是A3的N/2倍，N为采样点，0.2*500</span></span><br><span class="line"><span class="comment"># 第四个峰值（频率位置）的模是A4的N/2倍，N为采样点...</span></span><br><span class="line"><span class="comment"># 一般是不显示这个常数项的，取 freqs &gt; 0即可</span></span><br><span class="line"><span class="comment"># 频谱图中频率最低的元素称为基频，具有最高幅度的称为主频</span></span><br><span class="line"><span class="comment"># 频谱图中只显示一半采样频率的数据，就是因为奎纳斯定理采样频率大于信号频率的2倍</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">S_ifft = fft.ifft(complex_array) <span class="comment"># 傅里叶逆变换</span></span><br><span class="line"></span><br><span class="line">plt.plot(<span class="number">1000</span> * t[:<span class="number">100</span>], S_ifft[:<span class="number">100</span>], label=<span class="string">&#x27;S_ifft&#x27;</span>, color=<span class="string">&#x27;orangered&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;t（毫秒）&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;S_ifft(t)幅值&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;ifft变换图&quot;</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220309214808.png" alt="Figue_1"></p><h3 id="数据滤波"><a href="#数据滤波" class="headerlink" title="数据滤波"></a>数据滤波</h3><p>数据滤波的作用：</p><p>1、将有用的信号与噪声分离，提高信号的抗干扰性及信噪比；</p><p>2、滤掉不感兴趣的频率成分，提高分析精度；</p><p>3、从复杂频率成分中分离出单一的频率分量。</p><h4 id="频域滤波"><a href="#频域滤波" class="headerlink" title="频域滤波"></a>频域滤波</h4><p>通过时域转换为频域，在频域信号中去除相应频域信号，最后在逆转换还原为时域型号。</p><p>使用傅里叶变换将时域信号转为频域信号可以很容易地对数据进行滤波处理。</p><p>这里以一个音频信号处理为例，将包含噪声的音频信号经过傅里叶变换，只保留最大频率信号，在经过逆变换还原。可以发现音频信号变得平滑，噪声也消失了。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220309215948.png" alt="Filter"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> numpy.fft <span class="keyword">as</span> nf</span><br><span class="line"><span class="keyword">import</span> scipy.io.wavfile <span class="keyword">as</span> wf  <span class="comment"># wav数据读取</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取包含噪音的音频文件</span></span><br><span class="line">sample_rate, noised_sigs = wf.read(<span class="string">&#x27;noised.wav&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sample_rate)  <span class="comment"># sample_rate：采样率44100</span></span><br><span class="line"><span class="built_in">print</span>(noised_sigs.shape)  <span class="comment"># noised_sigs:存储音频中每个采样点的采样位移(220500,)</span></span><br><span class="line">times = np.arange(noised_sigs.size) / sample_rate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制音频信号图像</span></span><br><span class="line">plt.figure(<span class="string">&#x27;Filter&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Time Domain&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Signal&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.plot(times[:<span class="number">178</span>], noised_sigs[:<span class="number">178</span>], c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Noised&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 傅里叶变换后，绘制频域图像</span></span><br><span class="line">freqs = nf.fftfreq(times.size, times[<span class="number">1</span>] - times[<span class="number">0</span>])</span><br><span class="line">complex_array = nf.fft(noised_sigs)</span><br><span class="line">pows = np.<span class="built_in">abs</span>(complex_array)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Frequency Domain&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Power&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="comment"># 指数增长坐标画图</span></span><br><span class="line">plt.semilogy(freqs[freqs &gt; <span class="number">0</span>], pows[freqs &gt; <span class="number">0</span>], c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;Noised&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找能量最大的频率值</span></span><br><span class="line">fund_freq = freqs[pows.argmax()]</span><br><span class="line"><span class="comment"># where函数寻找那些需要抹掉的复数的索引</span></span><br><span class="line">noised_indices = np.where(freqs != fund_freq)</span><br><span class="line"><span class="comment"># 复制一个复数数组的副本，避免污染原始数据</span></span><br><span class="line">filter_complex_array = complex_array.copy()</span><br><span class="line">filter_complex_array[noised_indices] = <span class="number">0</span></span><br><span class="line">filter_pows = np.<span class="built_in">abs</span>(filter_complex_array)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Frequency&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Power&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.plot(freqs[freqs &gt;= <span class="number">0</span>], filter_pows[freqs &gt;= <span class="number">0</span>], c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;Filter&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">filter_sigs = nf.ifft(filter_complex_array).real</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Signal&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.plot(times[:<span class="number">178</span>], filter_sigs[:<span class="number">178</span>], c=<span class="string">&#x27;hotpink&#x27;</span>, label=<span class="string">&#x27;Filter&#x27;</span>)  <span class="comment"># 滤波后的信号周期为0.001s,频率为1000Hz</span></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 音乐频率范围约为20Hz---20KHz，人的声音频率范围约为300Hz---3.4KHz。但人能听到的最高频率是15KHz</span></span><br><span class="line"><span class="comment"># 人声:男:低音82~392Hz，基准音区64~523Hz</span></span><br><span class="line"><span class="comment"># 男中音123~493Hz，男高音164~698Hz</span></span><br><span class="line"><span class="comment"># 女:低音82~392Hz，基准音区160~1200Hz</span></span><br><span class="line"><span class="comment"># 女中音123~493Hz，女高音220~1.1KHz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成音频文件</span></span><br><span class="line">wf.write(<span class="string">&#x27;filter.wav&#x27;</span>, sample_rate, filter_sigs)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="时域滤波"><a href="#时域滤波" class="headerlink" title="时域滤波"></a>时域滤波</h4><p>参考：<a href="https://blog.csdn.net/iceberg7012/article/details/109901315?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-3-109901315.pc_agg_new_rank&utm_term=%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E6%BB%A4%E6%B3%A2%E5%99%A8%E6%98%AFfir+%E8%BF%98%E6%98%AFiir&spm=1000.2123.3001.4430">滤波器（FIR与IIR）</a></p><p>滤波器通过减小或放大某些频率来改变时间信号的频率成分。</p><p>数据滤波的时域方法是对信号离散数据进行差分方程数学运算来达到滤波的目的。经典数字滤波器实现方法主要有两种。一种是IIR数字滤波器，称为无限长冲激响应滤波器；另一种是FIR滤波器，称为有限长冲激响应滤波器。</p><p>其中脉冲响应”是指滤波器在时域中的外观。滤波器通常具有较宽的频率响应，其对应于时域中的短持续时间脉冲。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311103739.png" alt="image-20220311103739762"></p><p>无限长冲激响应IIR数字滤波器（Infinite Impuloe Response Digital Filter）的特征是具有无限持续时间的冲激响应，由于这种滤波器一般需要用递归模型来实现，因而又称为递归滤波器。因为IIR滤波器不仅用了输入有限项计算，而且把滤波器以前输出的有限项重新输入再计算，这在工程上称为反馈。</p><p>IIR数字滤波器的设计通常借助于模拟滤波器原型，再将模拟滤波器转换成数字滤波器。模拟滤波器的设计较为成熟，既有完整的设计公式，还有较为完整的可供查询的图表，因此，充分利用这些已有的资源无疑会给数字滤波器的设计带来很多便利。</p><p>常用的模拟低通滤波器的原型产生函数有==巴特沃斯滤波器原型、切比雪夫1型和2型滤波器原型、椭圆滤波器原型、贝塞尔（Bessel）滤波器原型==等。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311102626.webp" alt="77094b36acaf2eddb4e523878c1001e939019343"></p><p>有限长冲激响应FIR数字滤波器（Finite Impuloe Response Digital Filter）的特征是冲激响应只能延续一定时间，在工程实际应用中主要采用非递归的算法来实现。</p><p>优缺点对比：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311104110.png" alt="image-20220311104110602"></p><ul><li><strong>理想滤波器</strong></li></ul><p>使通带内信号的幅值和相位都不失真，阻喧内的频率成分都衰减为零的滤波器，其通带和阻带之间有明显的分界线。</p><p>如理想低通滤波器的频率响应函数为：</p><p><img src="http://img.mp.itc.cn/upload/20170406/65863ae5e55748c2b0c1ecba52e60983_th.jpeg" alt="img"></p><ul><li><strong>实际滤波器</strong></li></ul><p><img src="http://img.mp.itc.cn/upload/20170406/6b5528e269ad4a65978a233fb0c50a86.jpeg" alt="img"></p><p>理想滤波器是不存在的，在实际滤波器的幅频特性图中，通带和阻带之间应没有严格的界限。在通带和阻带之间存在一个过渡带。在过渡带内的频率成分不会被完全抑制，只会受到不同程度的衰减。</p><p>当然，希望过渡带越窄越好，也就是希望对通带外的频率成分衰减得越快、越多越好。因此，在设计实际滤波器时，总是通过各种方法使其尽量逼近理想滤波器。</p><p><img src="http://img.mp.itc.cn/upload/20170406/a65bba633ec6442b92c81b7d03b7503b.jpeg" alt="img"></p><p>如上理想带通和实际带通滤波器的幅频特性图可见，理想滤波器的特性只需用截止频率描述，而实际滤波器的特性曲线无明显的转折点，两截止频率之间的幅频特性也非常数，故需用更多参数来描述。</p><p>python中可以用lfilter与filtfilt进行滤波。</p><p>filtfilt是零相位滤波，在滤波时不会移位信号。由于在所有频率下相位均为零，因此它也是线性相位。及时过滤需要您预测未来，因此不能在“在线”实际应用中使用，仅用于信号记录的离线处理。<br>lfilter是一种因果时间过滤，类似于现实生活中的电子过滤器。它不能是零相位。它可以是线性相位（对称FIR），但通常不是。通常它会在不同的频率上增加不同的延迟量。</p><p><a href="http://www.zzvips.com/article/175035.html">==利用Scipy.signal.filtfilt() 实现信号滤波==</a></p><p>滤波函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.filtfilt(b, a, x, axis=-<span class="number">1</span>, padtype=<span class="string">&#x27;odd&#x27;</span>, padlen=none, method=<span class="string">&#x27;pad&#x27;</span>, irlen=none)</span><br></pre></td></tr></table></figure><p>输入参数：</p><p>b: 滤波器的分子系数向量</p><p>a: 滤波器的分母系数向量</p><p>x: 要过滤的数据数组。（array型）</p><p>这里选用巴特沃斯滤波器（Butterworth filter）滤波器，构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.signal.butter(n, wn, btype=<span class="string">&#x27;low&#x27;</span>, analog=false, output=<span class="string">&#x27;ba&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输入参数：</p><p>n: 滤波器的阶数</p><p>wn：归一化截止频率。计算公式wn=2*截止频率/采样频率。（注意：根据采样定理，采样频率要大于两倍的信号本身最大的频率，才能还原信号。截止频率一定小于信号本身最大的频率，所以wn一定在0和1之间）。当构造带通滤波器或者带阻滤波器时，wn为长度为2的列表。</p><p>btype : 滤波器类型{‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’},</p><p>output : 输出类型{‘ba’, ‘zpk’, ‘sos’},</p><p>输出参数：</p><p>b，a: iir滤波器的分子（b）和分母（a）多项式系数向量。output=’ba’</p><p>z,p,k: iir滤波器传递函数的零点、极点和系统增益. output= ‘zpk’</p><p>sos: iir滤波器的二阶截面表示。output= ‘sos’</p><p>对于如图所示的振动数据：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310111805.png" alt="Figure1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> numpy.fft <span class="keyword">as</span> fft</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> obspy <span class="keyword">import</span> read  <span class="comment"># 针对地震领域开发的python库</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line">tr = read()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始信号 s1 及对应的时间 t</span></span><br><span class="line">s1 = tr.data</span><br><span class="line"><span class="built_in">print</span>(s1.shape)</span><br><span class="line">t = np.arange(<span class="built_in">len</span>(s1)) * tr.stats.delta  <span class="comment"># tr.stats地震元数据，delta采样间隔,0.01s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################</span></span><br><span class="line"><span class="comment"># 傅里叶变换</span></span><br><span class="line">complex_array = fft.fft(s1)</span><br><span class="line">pows = np.<span class="built_in">abs</span>(complex_array)  <span class="comment"># 振幅</span></span><br><span class="line">freqs = fft.fftfreq(t.size, tr.stats.delta) <span class="comment"># 采样数量, 采样周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(freqs[freqs &gt;= <span class="number">0</span>], pows[freqs &gt;= <span class="number">0</span>], c=<span class="string">&#x27;orangered&#x27;</span>,label=<span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>对其进行滤波得到如图所示的结果：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310112303.png" alt="Figure1"></p><p>根据信号的频谱图可以知道，信号的主频率范围在低频部分。所以低通滤波（&lt;2Hz）效果较好，高通滤波（&gt;0.1Hz）就保留了大部分的高频噪声。带通滤波（&gt;0.1Hz，&lt;2Hz）也有不错的效果，带阻滤波（&lt;0.1Hz， &gt;2Hz）完全偏离原有数据波形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> obspy <span class="keyword">import</span> read  <span class="comment"># 针对地震领域开发的python库</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">tr = read()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始信号 s1 及对应的时间 t</span></span><br><span class="line">s1 = tr.data</span><br><span class="line"><span class="built_in">print</span>(s1.shape)</span><br><span class="line">t = np.arange(<span class="built_in">len</span>(s1)) * tr.stats.delta  <span class="comment"># tr.stats地震元数据，delta采样间隔,0.01s</span></span><br><span class="line"></span><br><span class="line">fs = <span class="number">1</span> / tr.stats.delta  <span class="comment"># 采样率 (赫兹)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4阶低通滤波</span></span><br><span class="line">fc = <span class="number">2</span>  <span class="comment"># 截止频率 （赫兹）</span></span><br><span class="line">b, a = signal.butter(<span class="number">4</span>, <span class="number">2.0</span> * fc / fs, btype=<span class="string">&#x27;lowpass&#x27;</span>)</span><br><span class="line">s2 = signal.filtfilt(b, a, s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4阶高通滤波</span></span><br><span class="line">fc = <span class="number">0.1</span>  <span class="comment"># 截止频率 （赫兹）</span></span><br><span class="line">b, a = signal.butter(<span class="number">4</span>, <span class="number">2.0</span> * fc / fs, btype=<span class="string">&#x27;highpass&#x27;</span>)</span><br><span class="line">s3 = signal.filtfilt(b, a, s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4阶带通滤波</span></span><br><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">2</span>  <span class="comment"># 通带的两个截止频率 （赫兹）</span></span><br><span class="line">b, a = signal.butter(<span class="number">4</span>, [<span class="number">2.0</span> * f1 / fs, <span class="number">2.0</span> * f2 / fs], btype=<span class="string">&#x27;bandpass&#x27;</span>)</span><br><span class="line">s4 = signal.filtfilt(b, a, s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4阶带阻滤波</span></span><br><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">2</span>  <span class="comment"># 阻带的两个截止频率</span></span><br><span class="line">b, a = signal.butter(<span class="number">4</span>, [<span class="number">2.0</span> * f1 / fs, <span class="number">2.0</span> * f2 / fs], btype=<span class="string">&#x27;bandstop&#x27;</span>)</span><br><span class="line">s5 = signal.filtfilt(b, a, s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图对比</span></span><br><span class="line">l = <span class="number">4</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(l, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s2, label=<span class="string">&#x27;Lowpass filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(l, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s3, label=<span class="string">&#x27;Highpass filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(l, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s4, label=<span class="string">&#x27;Bandpass filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(l, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s5, label=<span class="string">&#x27;Bandstop filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="卡尔曼滤波"><a href="#卡尔曼滤波" class="headerlink" title="卡尔曼滤波"></a>卡尔曼滤波</h4><p>参考视频：<a href="https://www.bilibili.com/video/av203511504?from=search&amp;seid=2691846854868972756&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/av203511504?from=search&amp;seid=2691846854868972756&amp;spm_id_from=333.337.0.0</a></p><p>==滤波就是将信号中的噪声滤除，使信号更趋于真实值==。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20211214150128.png" alt="image-20211214150128628"></p><p>对于上述测距传感器，测量值在一定范围波动，通过平滑滤波可以得到紫色的曲线，明显更接近真实值。</p><p>卡尔曼滤波（Kalman filtering）是一种利用线性系统状态方程，通过系统输入输出观测数据，对系统状态进行最优估计的算法。由于观测数据中包括系统中的噪声和干扰的影响，所以最优估计也可看作是滤波过程。</p><p>适用系统：<strong>线性高斯</strong>系统</p><ul><li><p>线性</p><ul><li>叠加性</li><li>齐次性</li></ul></li><li><p>高斯</p><p>噪声满足正态分布</p></li></ul><p>假设你有两个传感器，测的是同一个信号。可是它们每次的读数都不太一样，怎么办？ </p><p>取平均。 </p><p>再假设你知道其中贵的那个传感器应该准一些，便宜的那个应该差一些。那有比取平均更好的办法吗？ </p><p>加权平均。 </p><p>怎么加权？假设两个传感器的误差都符合正态分布，假设你知道这两个正态分布的方差，用这两个方差值，你可以得到一个“最优”的权重。 </p><p>接下来，重点来了：假设你只有一个传感器，但是你还有一个数学模型。模型可以帮你算出一个值，但也不是那么准。怎么办？ </p><p>==把模型算出来的值，和传感器测出的值，（就像两个传感器那样），取加权平均==。 </p><p>OK，最后一点说明：你的模型其实只是一个步长的，也就是说，知道x(k)，我可以求x(k+1)。问题是x(k)是多少呢？答案：x(k)就是你上一步卡尔曼滤波得到的、所谓加权平均之后的那个、对x在k时刻的最佳估计值。 </p><p>于是迭代也有了。 </p><p>这就是卡尔曼滤波。</p><p>==kalman滤波用在当测量值与模型预测值均不准确的情况下，用来计算预测真值的一种滤波方法==。</p><p>其本质上是一个==数据融合算法==，将具有同样测量目的、来自不同传感器、(可能) 具有不同单位 (unit) 的数据融合在一起，得到一个更精确的目的测量值。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310100249.png" alt="image-20220310100249254"></p><p>过程噪声Wk属于正态分布N（0；Qk）</p><p>观测误差Vk符合正态分布N（0；Rk）</p><p>统称为高斯白噪声。</p><p>GPS检测位置，检测到车子开了1000m，有一个误差Vk</p><p>车在路上行驶，5m/s，1s应该行驶5m，但是可能有顺风和逆风，存在一个误差Wk</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20211214105503.png" alt="image-20211214105503201"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pos = np.array([</span><br><span class="line">    [<span class="number">10</span>, <span class="number">50</span>],</span><br><span class="line">    [<span class="number">12</span>, <span class="number">49</span>],</span><br><span class="line">    [<span class="number">11</span>, <span class="number">52</span>],</span><br><span class="line">    [<span class="number">13</span>, <span class="number">52.2</span>],</span><br><span class="line">    [<span class="number">12.9</span>, <span class="number">50</span>]], np.float32)  <span class="comment"># 位置数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">它有3个输入参数，dynam_params：状态空间的维数，这里为2；measure_param：测量值的维数，这里也为2;</span></span><br><span class="line"><span class="string"> control_params：控制向量的维数，默认为0。由于这里该模型中并没有控制变量，因此也为0。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">kalman = cv2.KalmanFilter(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">kalman.measurementMatrix = np.array([[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 观测转移矩阵</span></span><br><span class="line">kalman.transitionMatrix = np.array([[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 状态转移矩阵</span></span><br><span class="line">kalman.processNoiseCov = np.array([[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32) * <span class="number">1e-3</span>  <span class="comment"># 过程噪声的协方差</span></span><br><span class="line">kalman.measurementNoiseCov = np.array([[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32) * <span class="number">0.01</span>  <span class="comment"># 测量噪声的协方差</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">kalman.measurementNoiseCov为测量系统的协方差矩阵，方差越小，预测结果越接近测量值</span></span><br><span class="line"><span class="string">kalman.processNoiseCov为模型系统的噪声，噪声越大，预测结果越不稳定，越容易接近模型系统预测值，</span></span><br><span class="line"><span class="string">且单步变化越大，相反，若噪声小，则预测结果与上个计算结果相差不大。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">kalman.statePre = np.array([[<span class="number">6</span>], [<span class="number">6</span>]], np.float32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pos)):  <span class="comment"># 迭代过程</span></span><br><span class="line">    mes = np.reshape(pos[i, :], (<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    x = kalman.correct(mes)</span><br><span class="line"></span><br><span class="line">    y = kalman.predict()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(kalman.statePost[<span class="number">0</span>], kalman.statePost[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(kalman.statePre[<span class="number">0</span>], kalman.statePre[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;measurement:\t&#x27;</span>, mes[<span class="number">0</span>], mes[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;correct:\t&#x27;</span>, x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;predict:\t&#x27;</span>, y[<span class="number">0</span>], y[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="数据平滑"><a href="#数据平滑" class="headerlink" title="数据平滑"></a>数据平滑</h3><p>平滑是滤波实现的一种方法，平滑叫平滑滤波更确切。</p><p>平滑就是去掉信号中没必要的快速起伏的成份，让信号看起来更光滑。本质上就是去掉高频分量。与低通滤波相似。</p><p>如果你去的噪音是跟信号完全<strong>不同的频率成份</strong>，就可以只用滤波的方法。比如说，你的信号是低频，噪音是高频，那一个简简单单的低通滤波器就妥妥的。但是可能会经常会遇到<strong>噪音的频率成份和信号频率成份重合在一起</strong>。滤波的方法是不能用了。那么这个时候，你就必须的借助一些更高级的方法，比如说，自适应滤波，小波变换等等等等。</p><p>下图是低通滤波和五点三次平滑的效果图：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311113059.png" alt="image-20220311113059133"></p><h4 id="滑动平均滤波"><a href="#滑动平均滤波" class="headerlink" title="滑动平均滤波"></a>滑动平均滤波</h4><p>滑动平均滤波法是把连续取N个采样值看成一个队列 ，队列的长度固定为N ，每次采样到一个新数据放入队尾，并扔掉原来队首的一次数据(先进先出原则) ，把队列中的N个数据进行算术平均运算，就可获得新的滤波结果。</p><p>优点： 对周期性干扰有良好的抑制作用，平滑度高 适用于高频振荡的系统 </p><p>缺点： 灵敏度低 对偶然出现的脉冲性干扰的抑制作用较差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.convolve(a, v, mode=‘full<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><p>参数：<br>　　a:(N,)输入的一维数组<br>　　v:(M,)输入的第二个一维数组<br>　　mode:{‘full’, ‘valid’, ‘same’}参数可选<br>　　　　‘full’　默认值，返回每一个卷积值，<strong>长度是N+M-1</strong>,在卷积的边缘处，信号不重叠，存在边际效应。<br>　　　　‘same’　返回的数组长度为<code>max(M, N)</code>,==边际效应依旧存在==。<br>　　　　‘valid’ 　返回的数组长度为<code>max(M,N)-min(M,N)+1</code>,此时返回的是完全重叠的点。边缘的点无效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">np_move_avg</span>(<span class="params">a,n,mode=<span class="string">&quot;same&quot;</span></span>):</span><br><span class="line">  <span class="keyword">return</span>(np.convolve(a, np.ones(n)/n, mode=mode))  <span class="comment"># 算术平均值是(x_1 + x_2 + ... + x_N) / N，所以相应的内核是(1/N, 1/N, ..., 1/N)，这正是我们通过使用得到的np.ones(N)/N</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">tes = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">weight = np.ones(<span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">result = np.convolve(tes, weight, mode=<span class="string">&#x27;full&#x27;</span>)  <span class="comment"># [0.5 1.5 2.5 1.5]</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result = np.convolve(tes, weight, mode=<span class="string">&#x27;same&#x27;</span>)  <span class="comment"># [0.5 1.5 2.5]</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result = np.convolve(tes, weight, mode=<span class="string">&#x27;vaild&#x27;</span>)  <span class="comment"># [1.5 2.5]</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="Savitzky-Golay平滑滤波"><a href="#Savitzky-Golay平滑滤波" class="headerlink" title="Savitzky-Golay平滑滤波"></a>Savitzky-Golay平滑滤波</h4><p>SG平滑算法是由Savizkg和Golag提出来的。基于最小二乘原理的多项式平滑算法，也称卷积平滑。其优于滑动平均滤波。</p><p>使用五点平滑算法来说明平滑过程：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20211210194952.jpg" alt="1433446-20190904203350697-1466434879" style="zoom:80%;" /><p>把信号一段区间的等波长间隔的5个点记为X集合，多项式平滑就是利用在波长点为Xm-2,Xm-1,Xm,Xm+1,Xm+2的数据的多项式拟合值来取代Xm,，然后依次移动，直到把信号遍历完。（==滑动窗口不能为偶数，且n大于k==）</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20211210195404.png" alt="image-20211210195404225" style="zoom: 67%;" /><h4 id="五点三次平滑"><a href="#五点三次平滑" class="headerlink" title="五点三次平滑"></a>五点三次平滑</h4><p>五点三次滤波实际上是略微改进之后的Savitzky-Golay滤波器。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220308154408.png" alt="image-20220308154408256"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> obspy <span class="keyword">import</span> read  <span class="comment"># 针对地震领域开发的python库</span></span><br><span class="line"><span class="keyword">from</span> scipy.signal <span class="keyword">import</span> savgol_filter <span class="keyword">as</span> sgolay</span><br><span class="line"></span><br><span class="line">tr = read()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始信号 s1 及对应的时间 t</span></span><br><span class="line">s1 = tr.data</span><br><span class="line"><span class="comment"># print(tr.stats)</span></span><br><span class="line">t = np.arange(<span class="built_in">len</span>(s1)) * tr.stats.delta  <span class="comment"># tr.stats地震元数据，delta采样间隔,0.01s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Savitsky-Golay 平滑滤波</span></span><br><span class="line">s2 = sgolay(s1, <span class="number">51</span>, <span class="number">3</span>)  <span class="comment"># 原始数据，滑动窗口大小，拟合多项式的次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5点3次平滑就是用3次多项式和5个数据进行拟合</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Mean5_3</span>(<span class="params">a, m</span>):  <span class="comment"># a为输入的一维信号,m为进行多少遍平滑，这是对Savitsky-Golay 平滑滤波的改进,可以进行多遍平滑</span></span><br><span class="line">    n = a.size</span><br><span class="line">    b = np.empty(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        b[<span class="number">0</span>] = (<span class="number">69</span> * a[<span class="number">0</span>] + <span class="number">4</span> * (a[<span class="number">1</span>] + a[<span class="number">3</span>]) - <span class="number">6</span> * a[<span class="number">2</span>] - a[<span class="number">4</span>]) / <span class="number">70</span></span><br><span class="line">        b[<span class="number">1</span>] = (<span class="number">2</span> * (a[<span class="number">0</span>] + a[<span class="number">4</span>]) + <span class="number">27</span> * a[<span class="number">1</span>] + <span class="number">12</span> * a[<span class="number">2</span>] - <span class="number">8</span> * a[<span class="number">3</span>]) / <span class="number">35</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n - <span class="number">2</span>, <span class="number">1</span>):</span><br><span class="line">            b[j] = (-<span class="number">3</span> * (a[j - <span class="number">2</span>] + a[j + <span class="number">2</span>]) + <span class="number">12</span> * (a[j - <span class="number">1</span>] + a[j + <span class="number">1</span>]) + <span class="number">17</span> * a[j]) / <span class="number">35</span></span><br><span class="line">        b[n - <span class="number">2</span>] = (<span class="number">2</span> * (a[n - <span class="number">1</span>] + a[n - <span class="number">5</span>]) + <span class="number">27</span> * a[n - <span class="number">2</span>] + <span class="number">12</span> * a[n - <span class="number">3</span>] - <span class="number">8</span> * a[n - <span class="number">4</span>]) / <span class="number">35</span></span><br><span class="line">        b[n - <span class="number">1</span>] = (<span class="number">69</span> * a[n - <span class="number">1</span>] + <span class="number">4</span> * (a[n - <span class="number">2</span>] + a[n - <span class="number">4</span>]) - <span class="number">6</span> * a[n - <span class="number">3</span>] - a[n - <span class="number">5</span>]) / <span class="number">70</span></span><br><span class="line">        a = b</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s3 = Mean5_3(s1, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">311</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">312</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s2, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Savitzky-Golay filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">313</span>)</span><br><span class="line">plt.plot(t, s1, label=<span class="string">&#x27;Original signal&#x27;</span>)</span><br><span class="line">plt.plot(t, s3, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Mean5_3 filtered&#x27;</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310221425.png" alt="Figure_1"></p><h3 id="去趋势项"><a href="#去趋势项" class="headerlink" title="去趋势项"></a>去趋势项</h3><p>参考：<a href="https://blog.csdn.net/pengchen_wuhan/article/details/118058489">https://blog.csdn.net/pengchen_wuhan/article/details/118058489</a></p><p>在振动测试过程中，传感器或采集设备由于自身性能问题或受环境干扰（如温度、供电等影响），容易产生零漂，而偏离基线，偏离基线的大小甚至还会随时间变化。偏离基线随时间变化的过程称之为信号的趋势项。信号的趋势线将直接影响信号分析的准确性，应该将其消除。常用的去除趋势项的方法是最小二乘法。</p><p>以下实验首先构造包含常数趋势项，线性趋势项和二次曲线趋势项的数据。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310190212.png" alt="Filter"></p><p>去趋势项的结果如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220310190452.png" alt="Filter"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造模拟信号</span></span><br><span class="line">fre = <span class="number">10</span> <span class="comment"># 信号的频率为10</span></span><br><span class="line">t = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.001</span>)</span><br><span class="line">sig = np.sin(<span class="number">2</span> * np.pi * fre * t) + <span class="number">0.1</span> + <span class="number">0.1</span> * t + <span class="number">0.2</span> * t ** <span class="number">2</span>  <span class="comment"># 包含常数趋势项，线性趋势项和二次曲线趋势项</span></span><br><span class="line">t = t.reshape(-<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># -1表示自动计算，把数组编程1000行1列的二维数组</span></span><br><span class="line">sig = sig.reshape(-<span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># 展示模拟信号</span></span><br><span class="line">plt.plot(t, sig)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;time(s)&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;signal(m/s^2)&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################</span></span><br><span class="line"><span class="comment"># 构造去除趋势项函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trend_remove</span>(<span class="params">t, sig, degree</span>):</span><br><span class="line">    <span class="comment"># 构造多项式回归模型</span></span><br><span class="line">    poly_reg = Pipeline([ <span class="comment"># Pieline可以将许多算法模型串联起来</span></span><br><span class="line">        (<span class="string">&#x27;poly&#x27;</span>, PolynomialFeatures(degree=degree)), <span class="comment"># PolynomialFeatures用于生成多项式，degree默认为2，多项式阶次</span></span><br><span class="line">        (<span class="string">&#x27;lin_reg&#x27;</span>, LinearRegression(fit_intercept=<span class="literal">False</span>))]) <span class="comment"># LinearRegression线性回归模型</span></span><br><span class="line">    <span class="comment"># 训练多项式回归模型（即求待定系数）</span></span><br><span class="line">    poly_reg.fit(t, sig) <span class="comment"># fit方法用于训练模型</span></span><br><span class="line">    <span class="comment"># 去除趋势项</span></span><br><span class="line">    sig_predict = poly_reg.predict(t) <span class="comment"># predict进行模型预测</span></span><br><span class="line">    sig_res = sig - sig_predict</span><br><span class="line">    <span class="comment"># 输出趋势项待定系数</span></span><br><span class="line">    model = poly_reg.named_steps[<span class="string">&#x27;lin_reg&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;趋势项待定系数为：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(model.coef_[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 返回去趋势项结果</span></span><br><span class="line">    <span class="keyword">return</span> sig_res</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################</span></span><br><span class="line">sig_res = trend_remove(t, sig, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示去除趋势项后的信号</span></span><br><span class="line">plt.plot(t, sig)</span><br><span class="line">plt.plot(t, sig_res)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;time(s)&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;signal(m/s^2)&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;sig&#x27;</span>,<span class="string">&#x27;sig_res&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的视频直播实现</title>
      <link href="/2022/04/23/%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/04/23/%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>参考自CSDN雷霄骅博客：<a href="https://blog.csdn.net/leixiaohua1020/article/details/18893769">https://blog.csdn.net/leixiaohua1020/article/details/18893769</a></p><p>视频播放器播放一个互联网上的视频文件，需要经过以下几个步骤：<strong>解协议，解封装，解码视音频，视音频同步</strong>。如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。</p><p>**==解协议==**的作用，就是将流媒体协议的数据，解析为标准的相应的封装格式数据。视音频在网络上传播的时候，常常采用各种流媒体协议，例如HTTP，RTMP，或是MMS等等。这些协议在传输视音频数据的同时，也会传输一些信令数据。这些信令数据包括对播放的控制（播放，暂停，停止），或者对网络状态的描述等。解协议的过程中会去除掉信令数据而只保留视音频数据。例如，采用RTMP协议传输的数据，经过解协议操作后，输出FLV格式的数据。</p><span id="more"></span><p>==流媒体协议==是服务器与客户端之间通信遵循的规定。常用的流媒体协议如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303123119.png" alt="image-20220303123119557"></p><p>**==解封装==**的作用，就是将输入的封装格式的数据，分离成为音频流压缩编码数据和视频流压缩编码数据。封装格式种类很多，例如MP4，MKV，RMVB，TS，FLV，AVI等等，它的作用就是将已经压缩编码的视频数据和音频数据按照一定的格式放到一起。例如，FLV格式的数据，经过解封装操作后，输出H.264编码的视频码流和AAC编码的音频码流。</p><p>==封装格式==：把视频数据和音频数据打包成一个文件的规范。常见的封装格式如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303123247.png" alt="image-20220303123246963"></p><p>有些封装格式支持的音视频编码标准十分广泛，应该算比较优秀的封装格式，比如MKV；而有些封装格式支持的音视频编码标准很少，应该属于落后的封装格式，比如RMVB。</p><p>**==解码==**的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。</p><p>==视频编码==的主要作用是将视频像素数据（RGB，YUV等）压缩成为视频码流，从而降低视频的数据量。如果视频不经过压缩编码的话，体积通常是非常大的，一部电影可能就要上百G的空间。视频编码是视音频技术中最重要的技术之一。常见的视频编码格式如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303123611.png" alt="image-20220303123611458"></p><p>常用的音频编码格式如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303123709.png" alt="image-20220303123709785"></p><p>==码流==（Data Rate）也叫码率，指的是视频文件在单位时间内使用的数据流量，对视频编码画面质量的控制起到重要作用。码率(kbps)=文件大小(KB) * 8 / 时间(秒)，比如800kbps代表编码器每秒产生800kbit（或100KB）的数据。在同样分辨率下，视频文件码流越大，压缩比就越小，画面质量就越好；几乎所有编码格式都比较重视如何用最低的码率达到最少的失真。同等码率的前提下，各种编码格式的视频质量MPEG-2&lt;H.263&lt;MPEG-4&lt;H.264/AVC。</p><p>**==视音频同步==**的作用，就是根据解封装模块处理过程中获取到的参数信息，同步解码出来的视频和音频数据，并将视频音频数据送至系统的显卡和声卡播放出来。</p><p>==分辨率==和==帧率==：</p><p>分辨率720P、1080P表示的是“视频像素的总行数”，例如：720P表示的是视频有720行像素，1080P则表示视频总共有1080行的像素数。1080P分辨率的摄像机像素数是1920*1080。2K、4K等是表示“视频像素的总列数”；例如4K，表示的是视频有4000列的像素数，4K分辨率的摄像机像素数有两种，第一种是：4096*2160；第二种是：3840*2160。</p><p>帧率是指每秒图像的数量，一帧代表的就是一副静止的画面。影响画面流畅度，一般20帧的FPS就已经可以达到很好的用户体验。</p><p>如果不做码率大小上的限制，那么分辨率越高，画质越细腻；帧率越高，视频越流畅，但相应的码率也会很大，因为每秒钟需要用更多的数据来承载较高的清晰度和流畅度。</p><p>如果限定视频的码率，就要调整分辨率和帧率来实现视频的播放。</p><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p>参考自CSDN雷霄骅博客：<a href="https://blog.csdn.net/leixiaohua1020/article/details/15811977">https://blog.csdn.net/leixiaohua1020/article/details/15811977</a></p><p>FFmpeg是一个完整的，跨平台的解决方案，用于记录，转换和流化音视频。可作为视频播放器以及音视频转码工具的内核。</p><p>ffmpeg的官方网站是：<a href="http://ffmpeg.org/">http://ffmpeg.org/</a></p><p>github开源地址：<a href="https://github.com/FFmpeg/FFmpeg">https://github.com/FFmpeg/FFmpeg</a></p><p>该网站中的FFMPEG分为3个版本：<strong>Static，Shared，Dev</strong>。</p><p>前两个版本可以直接在命令行中使用，他们的区别在于：Static里面只有3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe，每个exe的体积都很大，相关的Dll已经被编译到exe里面去了。Shared里面除了3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe之外，还有一些Dll，比如说avcodec-54.dll之类的。Shared里面的exe体积很小，他们在运行的时候，到相应的Dll中调用功能。</p><p>Dev版本是用于开发的，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不包含exe文件。</p><p>==ffmpeg==是用于转码的应用程序。</p><p>将input.avi转码成output.ts，并设置视频的码率为640kbps</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.avi</span> -<span class="selector-tag">b</span>:v <span class="number">640</span>k output.ts</span><br></pre></td></tr></table></figure><p>==ffplay==是用于播放的应用程序。</p><p>播放test.avi</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay test<span class="selector-class">.avi</span></span><br></pre></td></tr></table></figure><p>==ffprobe==是用于查看文件格式的应用程序。</p><h3 id="VLC"><a href="#VLC" class="headerlink" title="VLC"></a>VLC</h3><p>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及==各类流媒体协议==。                </p><p>官网：<a href="https://www.videolan.org/">https://www.videolan.org/</a></p><h3 id="EasyDrawin"><a href="#EasyDrawin" class="headerlink" title="EasyDrawin"></a>EasyDrawin</h3><p>EasyDarwin是国内基于Darwin Streaming Server二次开发的流媒体服务器。通过流媒体服务器可进行推流和拉流。</p><p>Darwin Streaming Server为苹果公司视频流解决方案的开源版本。</p><p>EasyDarwin官方网址：<a href="http://www.easydarwin.org/">http://www.easydarwin.org/</a><br>Github开源地址：<a href="https://github.com/EasyDarwin/EasyDarwin">https://github.com/EasyDarwin/EasyDarwin</a> </p><p><a href="https://github.com/EasyDarwin/EasyDarwin/releases">下载解压 release 包</a></p><p>Windows可直接运行EasyDarwin.exe</p><p>打开浏览器输入 <a href="http://localhost:10008,，进入控制页面，默认用户名密码是admin/admin">http://localhost:10008,，进入控制页面，默认用户名密码是admin/admin</a></p><p>测试==推流==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://localhost/test</span><br><span class="line"></span><br><span class="line">ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport udp -vcodec h264 -f rtsp rtsp://localhost/test</span><br></pre></td></tr></table></figure><p>测试==拉流==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffplay -rtsp_transport tcp rtsp://localhost/test</span><br><span class="line"></span><br><span class="line">ffplay rtsp://localhost/test</span><br></pre></td></tr></table></figure><p>也可以通过VLC播放器直接播放。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303151606.png" alt="image-20220303151606014"></p><p>在进行推流时，多个客户端进行拉流是同步的，推流完成之后就不能拉流了。这算是视频直播的一种方案。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303155618.png" alt="image-20220303155618763"></p><p>教程可参考：<a href="https://zhuanlan.zhihu.com/p/112082321">https://zhuanlan.zhihu.com/p/112082321</a></p><p>RTSP协议可参考<a href="https://blog.csdn.net/leixiaohua1020/article/details/11955341">https://blog.csdn.net/leixiaohua1020/article/details/11955341</a></p><h3 id="海康威视摄像头拉流"><a href="#海康威视摄像头拉流" class="headerlink" title="海康威视摄像头拉流"></a>海康威视摄像头拉流</h3><p>海康威视摄像头与电脑通过网线连接，在设备网络搜索可以查看：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311171513.png" alt="image-20220311171513658"></p><p>之后使用IE浏览器访问该IP可查看摄像头视频信息，还可在配置界面对摄像头进行配置：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311171831.png" alt="image-20220311171830721"></p><p>海康摄像头的监控地址为：<code>rtsp://admin:12345@192.168.1.64/h264/ch1/main/av_stream</code>（帐户，密码，ip,端口，…..）</p><p>使用VLC可进行拉流查看：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311172110.png" alt="image-20220311172109694"></p><h3 id="浏览器播放rtsp流媒体"><a href="#浏览器播放rtsp流媒体" class="headerlink" title="浏览器播放rtsp流媒体"></a>浏览器播放rtsp流媒体</h3><p>博客 <a href="https://blog.csdn.net/zs245584910/article/details/106712881/">https://blog.csdn.net/zs245584910/article/details/106712881/</a></p><p>通过==node-rtsp-stream==：<a href="https://www.npmjs.com/package/node-rtsp-stream%E8%BF%9B%E8%A1%8C%E6%8B%89%E6%B5%81%EF%BC%8C%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE==ffmpeg==%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%82">https://www.npmjs.com/package/node-rtsp-stream进行拉流，需要配置==ffmpeg==环境变量。</a></p><p>这种方案需要通过node-rtsp-stream开启拉流服务，之后html再去调用这个服务实现视频播放。使用的视频播放器是==jsmpeg==(<a href="https://github.com/phoboslab/jsmpeg)%EF%BC%8C%E8%BF%98%E9%9C%80%E8%A6%81%E5%8D%95%E7%8B%AC%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E3%80%82%E6%84%9F%E8%A7%89%E8%BF%98%E6%98%AF%E6%9C%89%E7%82%B9%E9%BA%BB%E7%83%A6%E3%80%82">https://github.com/phoboslab/jsmpeg)，还需要单独下载安装。感觉还是有点麻烦。</a></p><p>我实现了一下，文件目录如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220303171106.png" alt="image-20220303171106045"></p><p>运行步骤如下：</p><ol><li><p>运行EasyDarwin.exe</p></li><li><p>开启推流（需要win+R打开Windows Terminal才能执行ffmpeg命令）</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i C:\Users\Shi\Desktop\htmlvideo\bigdata.mp4 -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://localhost/test</span><br></pre></td></tr></table></figure><ol start="3"><li>开启拉流</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\server.js</span><br></pre></td></tr></table></figure><ol start="4"><li>打开html文件进行播放</li></ol><p>海康威视摄像头的话只需要开启拉流之后打开html播放即可。</p><p>博客 <a href="https://www.cnblogs.com/gaoji/p/6872365.html%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%98%AF%EF%BC%9Anginx%E6%90%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8Cffmpeg%E8%BD%AC%E7%A0%81%EF%BC%8Cjwplayer%E6%92%AD%E6%94%BE%E3%80%82">https://www.cnblogs.com/gaoji/p/6872365.html的实现方式是：nginx搭的服务器，ffmpeg转码，jwplayer播放。</a></p><p>核心就是把将rtsp协议的视频流转成rtmp，之后让播放器播放。</p><p>其他解决方案可参考：<a href="https://www.zhihu.com/question/29973696/answer/2034360284">https://www.zhihu.com/question/29973696/answer/2034360284</a></p><p>效果对比，左下角是海康的网站，左上角是VLC，右侧是html文件播放：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220311174629.gif"></p><h3 id="视频点播"><a href="#视频点播" class="headerlink" title="视频点播"></a>视频点播</h3><p>HTML5的video标签属于HTTP渐进流式下载，不需要流媒体服务器，普通HTTP服务器就可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">video</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;720&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;bigdata.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">            Your browser does not support the video tag.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">video</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>播放地址：<a href="https://www.cdfgroup.xyz/video/videotest.html">https://www.cdfgroup.xyz/video/videotest.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 音视频处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RTSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino遥控小车</title>
      <link href="/2022/04/23/Arduino%E9%81%A5%E6%8E%A7%E5%B0%8F%E8%BD%A6/"/>
      <url>/2022/04/23/Arduino%E9%81%A5%E6%8E%A7%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="遥控车"><a href="#遥控车" class="headerlink" title="遥控车"></a>遥控车</h2><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220418160333.jpg" alt="微信图片_20220418160239"></p><span id="more"></span><h3 id="传感器目录"><a href="#传感器目录" class="headerlink" title="传感器目录"></a>传感器目录</h3><h4 id="电机"><a href="#电机" class="headerlink" title="电机"></a>电机</h4><p>四个直流电机</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212931.png" alt="image-20220224212931529"></p><h4 id="电机电源"><a href="#电机电源" class="headerlink" title="电机电源"></a>电机电源</h4><p>4节5号可充电电池</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212152.png" alt="image-20220224212145164"></p><h4 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h4><p>H桥电路模块</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224213012.png" alt="image-20220224213012196"></p><h4 id="控制电路电源"><a href="#控制电路电源" class="headerlink" title="控制电路电源"></a>控制电路电源</h4><p>9V可充电电池</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212232.png" alt="image-20220224212231877"></p><p>DC-DC 12V转5V/3.3V电路板</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212657.png" alt="image-20220224212657721"></p><h4 id="控制模块"><a href="#控制模块" class="headerlink" title="控制模块"></a>控制模块</h4><p>Arduino Nano</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212757.png" alt="image-20220224212757816"></p><h4 id="通信模块"><a href="#通信模块" class="headerlink" title="通信模块"></a>通信模块</h4><p>HC-12无线数传模块（<a href="http://www.hc01.com/product">广州汇承信息科技有限公司</a>）</p><p>注意该模块比特率需要设置为9600。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224212821.png" alt="image-20220224212821848"></p><h4 id="遥控模块"><a href="#遥控模块" class="headerlink" title="遥控模块"></a>遥控模块</h4><p>摇杆</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220224213143.png" alt="image-20220224213142585"></p><h3 id="小车Arduino程序"><a href="#小车Arduino程序" class="headerlink" title="小车Arduino程序"></a>小车Arduino程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">SoftwareSerial <span class="title">softSerial</span><span class="params">(<span class="number">10</span>, <span class="number">11</span>)</span></span>;  <span class="comment">// RX, TX （RX接设备的TX，TX接设备的RX）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> back1 = <span class="number">2</span>; <span class="comment">// 左IA2</span></span><br><span class="line"><span class="type">int</span> front1 = <span class="number">3</span>; <span class="comment">// 左IB2</span></span><br><span class="line"><span class="type">int</span> back2 = <span class="number">4</span>; <span class="comment">// 左IA1</span></span><br><span class="line"><span class="type">int</span> front2 = <span class="number">5</span>; <span class="comment">// 左IB1</span></span><br><span class="line"><span class="type">int</span> back3 = <span class="number">6</span>; <span class="comment">// 右IA2</span></span><br><span class="line"><span class="type">int</span> front3 = <span class="number">7</span>; <span class="comment">// 右IB2</span></span><br><span class="line"><span class="type">int</span> back4 = <span class="number">8</span>; <span class="comment">// 右IA1</span></span><br><span class="line"><span class="type">int</span> front4 = <span class="number">9</span>; <span class="comment">// 右IB1</span></span><br><span class="line">String command = <span class="string">&quot;&quot;</span>;  <span class="comment">// 用户发送的命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initMoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 电平为LOW触发</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(back1, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(front1, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(back2, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(front2, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(back3, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(front3, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(back4, HIGH);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(front4, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  softSerial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(back1, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(front1, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(back2, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(front2, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(back3, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(front3, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(back4, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(front4, OUTPUT);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">initMoto</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  command = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (softSerial.<span class="built_in">available</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    command += <span class="built_in">char</span>(softSerial.<span class="built_in">read</span>());</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (command.<span class="built_in">length</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(command); </span><br><span class="line">    <span class="built_in">initMoto</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;front&quot;</span>)) &#123; <span class="comment">// 前进</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(front1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;back&quot;</span>)) &#123; <span class="comment">// 后退</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(back1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;left_back&quot;</span>)) &#123; <span class="comment">// 左侧后退</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(back1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;right_front&quot;</span>)) &#123; <span class="comment">// 右侧前进</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(front1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;left_front&quot;</span>)) &#123; <span class="comment">// 左侧前进</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(front2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front3, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;right_back&quot;</span>)) &#123; <span class="comment">// 右侧后退</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(back2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back3, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;left&quot;</span>)) &#123; <span class="comment">// 左移</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(back1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;right&quot;</span>)) &#123; <span class="comment">// 右移</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(front1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;left_circle&quot;</span>)) &#123; <span class="comment">// 左转圈</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(front1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;right_circle&quot;</span>)) &#123; <span class="comment">// 右转圈</span></span><br><span class="line">      <span class="built_in">digitalWrite</span>(back1, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(back2, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front3, LOW);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(front4, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (command.<span class="built_in">equals</span>(<span class="string">&quot;stop&quot;</span>)) &#123; <span class="comment">// 停止</span></span><br><span class="line">      <span class="comment">// 什么都不干</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遥控器Arduino程序"><a href="#遥控器Arduino程序" class="headerlink" title="遥控器Arduino程序"></a>遥控器Arduino程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line"><span class="function">SoftwareSerial <span class="title">softSerial</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;  <span class="comment">// 连接模块的TX、RX</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> xxInput = A0;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> yyInput = A1;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> zzInput = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sampleSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ReadAxis</span><span class="params">(<span class="type">int</span> axisPin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">long</span> reading = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">analogRead</span>(axisPin);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sampleSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    reading += <span class="built_in">analogRead</span>(axisPin);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reading / sampleSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(zzInput, INPUT);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  softSerial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> xxRaw = <span class="built_in">ReadAxis</span>(xxInput);</span><br><span class="line">  <span class="type">int</span> yyRaw = <span class="built_in">ReadAxis</span>(yyInput);</span><br><span class="line">  <span class="type">int</span> zzRaw = <span class="built_in">digitalRead</span>(zzInput);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//    Serial.print(xxRaw);</span></span><br><span class="line">  <span class="comment">//    Serial.print(&#x27;,&#x27;);</span></span><br><span class="line">  <span class="comment">//    Serial.print(yyRaw);</span></span><br><span class="line">  <span class="comment">//    Serial.print(&#x27;,&#x27;);</span></span><br><span class="line">  <span class="comment">//    Serial.println(zzRaw);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (zzRaw == <span class="number">0</span> &amp;&amp; xxRaw &gt; <span class="number">500</span> &amp;&amp; xxRaw &lt; <span class="number">550</span> &amp;&amp; yyRaw &gt; <span class="number">500</span> &amp;&amp; yyRaw &lt; <span class="number">550</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;停止&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xxRaw &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;前进&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;front&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xxRaw &lt; <span class="number">50</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;后退&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;back&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (yyRaw &lt; <span class="number">50</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;左移&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;left&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (yyRaw &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;右移&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;right&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (zzRaw == <span class="number">1</span>) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;右转圈&quot;</span>);</span><br><span class="line">    softSerial.<span class="built_in">print</span>(<span class="string">&quot;right_circle&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32入门教程</title>
      <link href="/2022/04/23/STM32%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/23/STM32%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="STM32简介"><a href="#STM32简介" class="headerlink" title="STM32简介"></a>STM32简介</h2><p>简介参考自：<a href="https://www.bilibili.com/video/BV1Qs41137dk?p=1">小马哥STM32四轴学习平台–DragonFly四轴STM32单片机软件入门级飞控算法课程</a></p><p>单片微型计算机简称单片机（MCU（MicrbControl Unit）），我们自己的个人计算机中，CPU、RAM、ROM、I/O这些都是单独的芯片，然后这些芯片被安装在一个主板上，这样就构成了我们的PC主板，进而组装成电脑，而单片机只是将这所有的集中在了一个芯片上而已。单片机又有8位的如51单片机、16位的如MSP430、32位的如STM32，通常我们说的多少位通常指的是内核（CPU）一次处理的数据宽度。也就是说内核一次处理的位数越多单片机的计算速度就越快，性能也就越强悍。</p><p>STM32是意法半导体（ST）推出一款<strong>32位</strong>的单片机。STM32具有超低的价格、超多的外设、丰富的型号、优异的实时性、极低的开发成本等优势。STM32凭借其产品线的多样化、极高的性价比、简单易用的<strong>库开发</strong>方式，迅速在众多32位单片机中脱颖而出。</p><p>STM32芯片内部可以粗略划分两部分：<strong>内核</strong>+<strong>片上外设</strong>。如果与电脑类比，内核与片上外设就如同电脑的CPU与主板、内存、显卡、硬盘的关系。<br>ARM公司只设计内核不生产芯片，他会将有关内核的技术授权给各半导体厂商例如ST、TI、Atme1、NXP等厂商。这些厂商都是基于这个内核自己设计片上外设如SRAM、ROM、FLASH、USART、GPIO等，然后集成到一个硅片上，这就是我们现在用的芯片。<br>芯片内部架构见图：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220408140032.png" alt="image-20201123192912952"></p><span id="more"></span><p>芯片内部内核和外设分别是两个公司设计的，那他们该怎么联系到一起协同高效的工作呢？答案就是总线，学过计算机组成原理的同学都应该知道计算机五大组成部分运算器、控制器、存储器、输入设备、输出设备他们之间的通信就是通过总线。我们上面也说了单片机就是一个集成在硅片上的计算机，所以他内部的连接关系也是靠总线。<br>STM32内部一共有11条总线：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20220408140022.png"></p><p>我们知道，在嵌入式开发中，比如51和Arduino，我们写程序烧入芯片就可以实现控制。那么我们写的程序怎么就能控制我们的单片机工作呢或者程序在控制什么东西呢？<br>那个东西就是寄存器，其实不管我们用库开发还是寄存器开发我们本质上就是在控制寄存器上的每个位的通断，并且这些寄存器都有其特定的功能。换句话说每个外设（如GPI0、USART、I2C、SPI.…）都对应有寄存器来对他控制。</p><p>所以<strong>STM32可以用寄存器开发也可以用库开发</strong>。</p><h3 id="STM的选型"><a href="#STM的选型" class="headerlink" title="STM的选型"></a>STM的选型</h3><p>STM32是ST的所有产品的统称，ST有两大家族STM8和STM32。STM8主要针对于低成本，对主频要求比较低、运算速度要求不是很高的低端市场。STM32主要应用于项目对主频要求较高、运算速度比较快、实时性好的中高端市场。STM32有很多产品大致划分可分为主流MCU、高性能MCU、低功耗MCU。其中主流MCU如STM32F1系列、高性能MCU如STM32F4、STM32F7系列、低功耗MCU如STM32L0系列。并且每个系列产品下面还会根据闪存容量、外设数量、封装大小分为很多种类并且价格也是差别很大。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123193718.png"></p><p>STM32型号的说明：以STM32F103RBT6这个型号的芯片为例，该型号的组成为7个部分，其命名规则如下：</p><table><thead><tr><th>1</th><th>STM32</th><th>STM32代表ARM Cortex-M内核的32位微控制器。</th></tr></thead><tbody><tr><td>2</td><td>F</td><td>F代表芯片子系列。</td></tr><tr><td>3</td><td>103</td><td>103代表增强型系列。</td></tr><tr><td>4</td><td>R</td><td>R这一项代表引脚数，其中T代表36脚，<strong>C代表48脚</strong>，R代表64脚，V代表100脚，<strong>Z代表144脚</strong>，I代表176脚。</td></tr><tr><td>5</td><td>B</td><td>B这一项代表内嵌Flash容量，其中6代表32K字节Flash，<strong>8代表64K字节Flash</strong>，B代表128K字节Flash，C代表256K字节Flash，D代表384K字节Flash，<strong>E代表512K字节Flash</strong>，G代表1M字节Flash。</td></tr><tr><td>6</td><td>T</td><td>T这一项代表封装，其中H代表BGA封装，<strong>T代表LQFP封装</strong>，U代表VFQFPN封装。</td></tr><tr><td>7</td><td>6</td><td>6这一项代表工作温度范围，其中<strong>6代表-40——85℃</strong>，7代表-40——105℃。</td></tr></tbody></table><p>我手上是一款<strong>德飞莱尼莫M3S V2.3开发板</strong>。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201120144635.jpg" alt="（德飞莱）尼莫M3S串口驱动安装及下载程序使用说明书"></p><p>用的是<strong>STM32F103ZET6</strong>，芯片说明书如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201120172510.png"></p><p>之后还购置了一款最小系统板，搭载<strong>STM32103C8T6</strong>：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123201358.png"></p><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>先下载keil软件（官网<a href="https://www.keil.com/demo/eval/arm.htm">下载</a>MDK5的安装包）：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201120175221.png" alt="微信截图_20201120175054"></p><p>注意：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201120175427.png"></p><p>所以<strong>要开发C51就得下载C51的Keil</strong>，<strong>要开发STM32就得下载MDK-Arm</strong>。</p><p>如果要设置C51和STM32的开发环境，一般需要准备如下文件：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201120180126.png" alt="微信截图_20201120175054"></p><p>资源链接： <a href="https://pan.baidu.com/s/14I0zwdvKlbR5PbrsAlxMDQ">百度网盘密码：d1cs</a></p><p>安装可以参考这个：<a href="https://microdynamics.github.io/1.%20Breeze%20Mini%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/2.1%20STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Keil)/">STM32开发环境搭建(Keil)</a></p><p>和<a href="https://blog.csdn.net/qq_41639829/article/details/81813992?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">MDK5安装破解以及安装stm32与C51支持包(附安装包)</a></p><p>其中pack文件是STM32的芯片包，可以在安装完keil后下载(KEIL公司的软件包<a href="http://www.keil.com/dd2/Pack/">托管网站</a>)双击安装，也可以去keil的pack Installer安装。</p><h4 id="Keil安装"><a href="#Keil安装" class="headerlink" title="Keil安装"></a>Keil安装</h4><p>选择安装路径时包括选择MDK核心组件(<strong>Core</strong>)的安装路径和外设包(<strong>Pack</strong>)的安装路径，一般只用选择 <strong>Core</strong> 的安装路径，<strong>Pack</strong> 的路径会自动设置为 <strong>Core</strong> 路径下的<code>ARM/PACK</code>。</p><p>安装完成后，会自动弹出 <strong>Pack Installer</strong> 界面，如果没有的话可以打开安装好的 <strong>Keil uVision5</strong> 软件，在工具栏上找到 <strong>Pack Installer</strong> 的图标，然后点击进入：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123165306.png" alt="mdk5_pack_installer"></p><p>由于我们使用的STM32型号为 <strong>STM32F103ZET6，还需要安装开发所需要的器件支持包(Device Family Pack, i.e. DFP</strong>)，所以展开STM系列产品的菜单栏，找到芯片设备，点击左边Packs中的三个组件，<strong>Pack Installer</strong> 会自动从网上下载最新版本的组件，下载进度在 <strong>Pack Installer</strong> 底部状态栏显示。（由于我已经通过双击安装好了，所以是Up to date）</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123165753.png" alt="image-20201123165751452"></p><p>直接用Keil5新建工程（只能用Keil5快速新建工程）。</p><p>Project-&gt; New，之后选择自己的开发板芯片：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123172444.png"></p><p>确定之后又跳到运行环境的界面：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123181849.png"></p><p>必选CMSIS的<strong>Core</strong>还有Device的<strong>Startup</strong>。</p><p>如果要连接外设必须勾选外设的时钟<strong>RCC</strong>，一般再勾选上<strong>Framework</strong>、<strong>GPIO</strong>、和<strong>USART</strong>串口。</p><p>点击OK确定创建项目。项目创建完成后就是这样的：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123182515.png"></p><p>可以看到已经包含了我们选择的库文件。如果还需要什么可以再点击图上的按钮再次打开运行环境配置页面。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123182328.png"></p><p>之后可以右键点击左侧的资源管理器，管理一下项目目录，比如自定义名字。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123183232.png"></p><p>然后添加<strong>main.c</strong>文件：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123183213.png"></p><p>之后就可以在main文件中写代码了。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123183740.png"></p><p>写完可以编译一下，如果输出正确就表示环境配置没问题。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123184916.png"></p><p>这里默认是不会创建Hex文件的，所以还需要进入设置里面去设置一下。</p><p>点击魔法棒：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124151913.png"></p><p>进入设置界面</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123183935.png"></p><p>之后再编译就可以在Objects文件夹下面看到Hex文件。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123185142.png"></p><h3 id="烧写程序"><a href="#烧写程序" class="headerlink" title="烧写程序"></a>烧写程序</h3><h4 id="1-USB转串口烧写"><a href="#1-USB转串口烧写" class="headerlink" title="1. USB转串口烧写"></a>1. USB转串口烧写</h4><p>参考这个：<a href="https://www.wangchaochao.top/2019/03/20/uFun-4/">如何使用串口来给STM32下载程序</a></p><p>不过具体还得看官方的开发板说明书。</p><h4 id="2-ST-Link烧写"><a href="#2-ST-Link烧写" class="headerlink" title="2. ST-Link烧写"></a>2. ST-Link烧写</h4><p>用stlink下载比USB转TTL稍快一些，而且ST-Link可以进行仿真，对于大型程序的调试非常有用。</p><p>安装使用可以参考这个：<a href="https://blog.csdn.net/ybhuangfugui/article/details/52597133">STM32 ST-LINK Utility介绍、下载、安装、使用方法</a></p><p>STLink 上 LED 指示灯用于提示当前的工作状态，具体情况如下：</p><ul><li>LED 闪烁<strong>红色</strong>：STLink 已经连接至计算机。</li><li>LED 保持<strong>红色</strong>：计算机已经成功与 STLink 建立通信连接。</li><li>LED 交替闪烁<strong>红色</strong>和<strong>绿色</strong>：数据正在传输。</li><li>LED 保持<strong>绿色</strong>：最后一次通信是成功的。</li><li>LED 为橘<strong>黄色</strong>：最后一次通信失败。</li></ul><p>下载程序说白了就是3步：</p><p>1.连接芯片：</p><p><strong>Tarage  -&gt; connect</strong>或直接点击连接快捷按钮:</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123185645.png"></p><p>2.打开程序</p><p>打开hex文件可以从菜单栏（<strong>File -&gt; Open File</strong>）打开，也可以直接讲hex文件<strong>拖动</strong>到FLASH区域：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123185910.png"></p><p>3.下载程序</p><p>点击“<strong>下载</strong>”（可以Taraget -&gt; Program，也可以直接点击下载快捷按钮，如下图）：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123190024.png"></p><p>弹出信息确认窗口，如hex文件路径、验证方式等，确认信息无误后点击“Start”开始下载程序。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123190153.png"></p><p>出现“<strong>Verification…OK</strong>”，说明下载成功。</p><h3 id="ST-Link仿真"><a href="#ST-Link仿真" class="headerlink" title="ST-Link仿真"></a>ST-Link仿真</h3><p>ST-LINK是专门针对STM8和STM32系列芯片的仿真器。使用ST-Link调试器，可以直接在Keil环境下进行下载，而且还可以进行在线调试</p><p>参考自：<a href="https://blog.csdn.net/sinat_26944045/article/details/81165515">STM32 Keil中关于stlink的调试 下载设置</a></p><p>首先进入设置界面。找到Debug ，选择stlink调试器，点击setting：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124151446.png"></p><p>选择模式为SW模式，点击确定：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124151512.png"></p><p>点击Utilities选项卡，先取消use debug driver ，然后再选择选择ST-Link Debugger，点击Settings：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124151518.png"></p><p>首先先是要打勾，然后根据芯片flash的大小添加（Add）相应的信息，最后点击确定即可：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124151522.png"></p><p>仿真的过程如下：</p><p>首先是重新编译整个项目：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124152729.png" alt="微信截图_20201124152723"></p><p>点击仿真按钮：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124152452.png"></p><p>进入仿真页面（以后面讲解的闪烁LED的程序为例）：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124153847.png" alt="微信截图_20201124153818"></p><p>具体的调试方法这里就不说了。毕竟也是新手，目前还用不到调试功能，只是出于好奇研究了一下相关配置。</p><p>想深入研究可以参考<a href="https://zhuanlan.zhihu.com/p/57720248">Keil系列教程09_调试仿真</a>。</p><h3 id="点亮LED灯"><a href="#点亮LED灯" class="headerlink" title="点亮LED灯"></a>点亮LED灯</h3><h4 id="GPIO简介"><a href="#GPIO简介" class="headerlink" title="GPIO简介"></a>GPIO简介</h4><p>参考自：<a href="https://zhuanlan.zhihu.com/p/61290597">【STM32开发】STM32 GPIO配置</a></p><p>GPI0是通用输入输出端口的简称，从名字上也可看出GPIO最基本的功能就输入和输出。它也是芯片内部与外部电路连接的唯一的接口，换句话说只要我们使用片上外设几乎都会与GPIO打交道。<br>GPI0基本功能是输入和输出，但是STM32本身就是一个很复杂的系统，内部外设繁多，那么GPIO的基本功能是肯定满足不了这么多外设的需求，芯片厂商为了解决此问题，将GPI0分为八种模式（输入4种+输出4种）。八种模式分别为：</p><ol><li><p>输入浮空  GPIO_Mode_IN_FLOATING </p></li><li><p>输入上拉  GPIO_Mode_IPU </p></li><li><p>输入下拉  GPIO_Mode_IPD </p></li><li><p>模拟输入  GPIO_Mode_AIN </p></li><li><p>具有上拉或下拉功能的开漏输出  GPIO_Mode_Out_OD </p></li><li><p>具有上拉或下拉功能的推挽输出  GPIO_Mode_Out_PP </p></li><li><p>具有上拉或下拉功能的复用功能推挽  GPIO_Mode_AF_PP </p></li><li><p>具有上拉或下拉功能的复用功能开漏  GPIO_Mode_AF_OD </p></li></ol><p>我的STM32开发板板载两个LED小灯，电路图如下：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201123204843.png"></p><h4 id="GPIO配置"><a href="#GPIO配置" class="headerlink" title="GPIO配置"></a>GPIO配置</h4><p>由于STM32的GPIO工作模式有8种，所以在GPIO输出之前要先对要操作的GPIO进行配置：</p><ul><li><p>定义GPIO的初始化结构体类型</p></li><li><p>使能GPIO的时钟</p></li><li><p>配置GPIO的引脚</p></li><li><p>配置GPIO口的输出类型为推挽</p></li><li><p>配置GPIO口的输出速度</p></li><li><p>初始化GPIO（初始化相应的寄存器）</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;  <span class="comment">// 定义结构体变量</span></span><br><span class="line"><span class="comment">//打开PB口时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"><span class="comment">//打开PE口时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);</span><br><span class="line"><span class="comment">//PB5,PE5引脚设置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line"><span class="comment">//设置输出速率50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"><span class="comment">//推挽输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line"><span class="comment">//初始化外设GPIOx寄存器</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_Init(GPIOE, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure><p>解释：</p><p><strong>1.定义GPIO的初始化类型结构体：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br></pre></td></tr></table></figure><p>此结构体的定义是在<code>stm32f10x_gpio.h</code>文件中，其中包括3个成员。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> GPIO_Pin;       </span><br><span class="line">  GPIOSpeed_TypeDef GPIO_Speed;  </span><br><span class="line">  GPIOMode_TypeDef GPIO_Mode;   </span><br><span class="line">&#125;GPIO_InitTypeDef;</span><br></pre></td></tr></table></figure><p>（1）<code>uint16_t GPIO_Pin;</code>来指定GPIO的哪个或哪些引脚，取值参见<code>stm32f10x_gpio.h</code>头文件的宏定义。</p><p>（2）<code>GPIOSpeed_TypeDef GPIO_Speed;</code>GPIO的速度配置，此项的取值参见<code>stm32f10x_gpio.h</code>头文件<code>GPIOSpeed_TypeDef</code>枚举的定义，其中对应3个速度：10MHz、2MHz、50MHz；</p><p>（3）<code>GPIOMode_TypeDef GPIO_Mode;</code>为GPIO的工作模式配置，其取值参见<code>stm32f10x_gpio</code>头文件<code>GPIOMode_TypeDef</code>枚举的定义，即GPIO的8种工作模式。</p><p><strong>2.使能GPIO时钟</strong></p><p>ARM与C51单片机不同的是，不用外设的时候，如IO口、ADC、定时器等等，都是禁止时钟的，以达到节能的目的，只有要用到的外设，才开启它的时钟。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RCC_APB2PeriphClockCmd</span><span class="params">(<span class="type">uint32_t</span> RCC_APB2Periph, FunctionalState NewState)</span>;</span><br></pre></td></tr></table></figure><p>此函数是在<code>stm32f10x_rcc.c</code>文件中定义的。其中第一个参数指要打开哪一组GPIO的时钟，取值参见<code>stm32f10x_rcc.h</code>文件中的宏定义，第二个参数为打开或关闭使能，取值参见<code>stm32f10x.h</code>文件中的定义，其中ENABLE代表开启使能，DISABLE代表关闭使能。</p><p><strong>3.设置GPIO_InitTypeDef结构体三个成员的值</strong></p><p>这里包括引脚、速度和工作模式，取值可参考第一部分。</p><p><strong>4.初始化GPIO</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef*  GPIO_InitStruct)</span>;</span><br></pre></td></tr></table></figure><p>函数配置GPIO，此函数是在<code>stm32f10x_gpio.c</code>文件中定义的，其中第一个参数代表要配置哪组GPIO，取值参见<code>stm32f10x.h</code>文件中的定义，第二个参数是第1步定义的GPIO的初始化类型结构体。</p><h4 id="GPIO电平输出"><a href="#GPIO电平输出" class="headerlink" title="GPIO电平输出"></a>GPIO电平输出</h4><p>官方让GPIO输出高低电平的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_SetBits(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin);</span><br></pre></td></tr></table></figure><p>函数就是置位GPIO，即让相应的GPIO输出高电平；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GPIO_ResetBits</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p>函数是让GPIO复位的，即让相应的GPIO输出低电平。</p><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_OFF GPIO_SetBits(GPIOB,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_ON GPIO_ResetBits(GPIOB,GPIO_Pin_5)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;  <span class="comment">// 定义结构体变量</span></span><br><span class="line">    <span class="comment">//打开PB口时钟</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    <span class="comment">//PB5引脚设置</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">    <span class="comment">//端口速度</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    <span class="comment">//端口模式，此为输出推挽模式</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    <span class="comment">//初始化对应的端口</span></span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LED3_ON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="闪烁LED灯"><a href="#闪烁LED灯" class="headerlink" title="闪烁LED灯"></a>闪烁LED灯</h3><p>这个实验室做的两个led流水灯。</p><h4 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h4><p>首先新建一个文件夹<code>MY</code>：</p><p>在该文件夹下新建一个<code>led.h</code>头文件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_OFF GPIO_SetBits(GPIOE,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_ON GPIO_ResetBits(GPIOE,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_REV GPIO_WriteBit(GPIOE, GPIO_Pin_5,(BitAction)(1-(GPIO_ReadOutputDataBit(GPIOE, GPIO_Pin_5))))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_OFF GPIO_SetBits(GPIOB,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_ON GPIO_ResetBits(GPIOB,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_REV GPIO_WriteBit(GPIOB, GPIO_Pin_5,(BitAction)(1-(GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5))))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后新建一个led.c文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;  <span class="comment">// 定义结构体变量</span></span><br><span class="line">    <span class="comment">//打开PB口时钟</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    <span class="comment">//打开PE口时钟</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);</span><br><span class="line">    <span class="comment">//PB5，PE5引脚设置</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">    <span class="comment">//端口速度</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    <span class="comment">//端口模式，此为输出推挽模式</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    <span class="comment">//初始化对应的端口</span></span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_Init(GPIOE, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后编写main文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> i; </span><br><span class="line">    LED_Init(); <span class="comment">//初始化LED</span></span><br><span class="line"></span><br><span class="line">    LED2_ON;</span><br><span class="line">    LED3_OFF;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">0xffffff</span>; i++); <span class="comment">//for循环不精确延时</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">0xfffff</span>; i++); <span class="comment">//for循环不精确延时</span></span><br><span class="line">        LED2_REV;<span class="comment">//LED2取反</span></span><br><span class="line">        LED3_REV;<span class="comment">//LED3取反</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构目录如图：</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124091435.png"></p><p><code>.h</code>文件默认是不显示的。编译通过后，在左侧的.C文件上会出现一个“＋”号，点开就是该C文件使用到的<code>h</code>文件。</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20201124094101.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图服务发布</title>
      <link href="/2022/04/22/%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83/"/>
      <url>/2022/04/22/%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="地图服务发布"><a href="#地图服务发布" class="headerlink" title="地图服务发布"></a>地图服务发布</h1><p>教程参考：<a href="https://www.cnblogs.com/kkyyhh96/p/6379515.html">https://www.cnblogs.com/kkyyhh96/p/6379515.html</a></p><p>视频参考：<a href="https://www.bilibili.com/video/BV1vk4y127P8">https://www.bilibili.com/video/BV1vk4y127P8</a></p><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>MySQL 是最流行的关系型数据库管理系统（RDBMS）。</p><p>PostgreSQL 是一个免费的对象-关系数据库系统(ORDBMS)。ORDBMS是面向对象技术与传统的关系数据库相结合的产物，在原来关系数据库的基础上，增加了一些新的特性。</p><p>EnterpriseDB 是全球唯一一家提供基于 PostgreSQL 企业级产品与服务的厂商，在这里可以下载pg数据库。</p><span id="more"></span><p>下载地址：<a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">https://www.enterprisedb.com/downloads/postgres-postgresql-downloads</a></p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804152642.png" alt="image-20210804152642254" style="zoom:80%;" /><p>下载进来是个exe可执行文件，双击运行。</p><p>安装过程参考：<a href="https://www.runoob.com/postgresql/windows-install-postgresql.html">https://www.runoob.com/postgresql/windows-install-postgresql.html</a></p><p>（注意：安装时可以选择中文，但是我的报错了<code>The database cluster initialization failed</code>）</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804212205.png" alt="image-20210804212205842" style="zoom:80%;" /><p>汉化：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805095605.png" alt="image-20210805095604949" style="zoom:80%;" /><p>安装完成后Navicat连接，密码为安装时设置的密码（xiaoshi）。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804154704.png" alt="image-20210804154704044" style="zoom:80%;" /><p>默认是开机启动服务，如果需要设置成手动，按如下步骤执行：开始-&gt;运行-&gt;（然后键入：） services.msc。当您看到PostgresSQL服务时，将它们设置为手动而不是自动。</p><p>之后开启关闭服务可以通过如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net start postgresql-x64-10</span><br><span class="line"></span><br><span class="line">net stop postgresql-x64-10</span><br></pre></td></tr></table></figure><h2 id="PostGIS"><a href="#PostGIS" class="headerlink" title="PostGIS"></a>PostGIS</h2><p>PostGIS 是一个开源程序，它<strong>为对象－关系型数据库PostgreSQL提供了存储空间地理数据的支持，使PostgreSQL成为了一个空间数据库</strong>，能够进行空间数据管理、数量测量与几何拓扑分析。PostGIS 实现了开放地理空间协会所提出的基本要素类（点、线、面、多点、多线、多面等）的SQL实现参考。 </p><p>PostgreSQL安装完成后自带了Application Stack Builder，但速度比较慢，而且可能会卡死无响应（我就卡死了，下载不进来）。</p><p>推荐直接下载exe可执行文件安装。</p><p>下载地址：<a href="http://download.osgeo.org/postgis/windows/pg10/">http://download.osgeo.org/postgis/windows/pg10/</a></p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804155233.png" alt="image-20210804155233170" style="zoom:80%;" /><p>下载完成后安装，注意在设置安装组件时，最好选择”<strong>Create spatial database</strong>“，以便在创建数据库时可以以此作为模板。对于其他步骤的设置都选择默认值即可。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804155357.png" alt="image-20210804155357258" style="zoom:80%;" /><p>输入密码：2</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804155542.png" alt="image-20210804155541958" style="zoom:80%;" /><p>安装成功后就可以在Navicat里面看到新增了一个数据库。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804160203.png" alt="image-20210804160203816" style="zoom:80%;" /><h3 id="创建空间数据库"><a href="#创建空间数据库" class="headerlink" title="创建空间数据库"></a>创建空间数据库</h3><p>新建一个数据库postgis_test，里面新建查询，输入以下查询语句以加载<strong>PostGIS空间扩展</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis;</span><br></pre></td></tr></table></figure><p>成功后，刷新，数据表中会出现spatial_ref_sys表，说明可以导入空间数据了。</p><p>也可以通过运行PostGIS函数来确认是否在数据库中安装了PostGIS扩展插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> postgis_full_version();</span><br></pre></td></tr></table></figure><h3 id="加载空间数据"><a href="#加载空间数据" class="headerlink" title="加载空间数据"></a>加载空间数据</h3><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/62160223">https://zhuanlan.zhihu.com/p/62160223</a></p><p><a href="https://link.zhihu.com/?target=http://s3.cleverelephant.ca/postgis-workshop-2018.zip">数据下载地址</a></p><p>使用的数据介绍：<a href="https://zhuanlan.zhihu.com/p/62337014">https://zhuanlan.zhihu.com/p/62337014</a></p><ol><li> 一个shapfile必须有的文件：</li></ol><ul><li><p>.shp —— 存储地理要素的几何信息</p></li><li><p>.shx —— 存储要素几何图形的索引信息</p></li><li><p>.dbf —— 存储地理要素的属性信息（非几何信息）</p></li></ul><p>可选文件包括：</p><ul><li>.prj —— 存储空间参考信息，即地理坐标系统信息和投影坐标系统信息。使用well-known文本格式进行描述。</li></ul><p>PostGIS shapefile工具将shapefile数据从二进制转换为一系列的SQL命令，然后在数据库中运行以加载数据，从而使shapefile数据在PostGIS中可用。</p><ol start="2"><li>“SRID”表示“Spatial Reference IDentifier（空间参考标识符)”。它定义了我们数据的<strong>地理坐标系统</strong>和<strong>投影</strong>的所有参数。</li></ol><p>SRID很方便，因为它将有关地图投影的所有信息（可能非常复杂）打包（更具体的说应该是映射）到一个数字中。</p><p>直接在PostGIS内部对spatial_ref_sys表进行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> srtext <span class="keyword">FROM</span> spatial_ref_sys <span class="keyword">WHERE</span> srid <span class="operator">=</span> <span class="number">26918</span>;</span><br></pre></td></tr></table></figure><p>PostGIS的spatial_ref_sys表是一个OGC标准表，用于定义数据库已知的所有空间参考系统。PostGIS附带的数据列出了3000多个已知的空间参考系统以及在它们之间进行转换/重新投影所需的详细信息。</p><p>26918对应的空间参考系统的文本表示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PROJCS[</span><br><span class="line">  &quot;NAD83 / UTM zone 18N&quot;,</span><br><span class="line">  GEOGCS[</span><br><span class="line">    &quot;NAD83&quot;,</span><br><span class="line">    DATUM[</span><br><span class="line">      &quot;North_American_Datum_1983&quot;,</span><br><span class="line">      SPHEROID[</span><br><span class="line">        &quot;GRS 1980&quot;,<span class="number">6378137</span>,<span class="number">298.257222101</span>,AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]</span><br><span class="line">      ],</span><br><span class="line">      AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]</span><br><span class="line">    ],</span><br><span class="line">    PRIMEM[&quot;Greenwich&quot;,<span class="number">0</span>,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],</span><br><span class="line">    UNIT[&quot;degree&quot;,<span class="number">0.01745329251994328</span>,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],</span><br><span class="line">    AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]</span><br><span class="line">  ],</span><br><span class="line">  UNIT[&quot;metre&quot;,<span class="number">1</span>,AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],</span><br><span class="line">  PROJECTION[&quot;Transverse_Mercator&quot;],</span><br><span class="line">  <span class="keyword">PARAMETER</span>[&quot;latitude_of_origin&quot;,<span class="number">0</span>],</span><br><span class="line">  <span class="keyword">PARAMETER</span>[&quot;central_meridian&quot;,<span class="number">-75</span>],</span><br><span class="line">  <span class="keyword">PARAMETER</span>[&quot;scale_factor&quot;,<span class="number">0.9996</span>],</span><br><span class="line">  <span class="keyword">PARAMETER</span>[&quot;false_easting&quot;,<span class="number">500000</span>],</span><br><span class="line">  <span class="keyword">PARAMETER</span>[&quot;false_northing&quot;,<span class="number">0</span>],</span><br><span class="line">  AUTHORITY[&quot;EPSG&quot;,&quot;26918&quot;],</span><br><span class="line">  AXIS[&quot;Easting&quot;,EAST],</span><br><span class="line">  AXIS[&quot;Northing&quot;,NORTH]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 如果从数据的data目录打开xxx.prj文件，将看到相同的投影信息。</p><p>使用PostGIS的一个常见问题是弄清楚要使用哪个SRID号来使用他们的数据。他们只有一个.prj文件，但是应该如何将.prj文件转换成正确的SRID号呢？</p><p>最简单的方法就是去GIS软件里面查看shapfile的属性。</p><p>加载过程：</p><p>使用<strong>PostGIS 2.0 Shapefile and DBF Loader Exporter</strong>进行加载。</p><ol><li>设置连接</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805144708.png" alt="image-20210805144708038" style="zoom:80%;" /><ol start="2"><li>导入数据，设置SRID号</li></ol><p>在QGIS里面查看SRID为<img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805145010.png" alt="image-20210805145010252" style="zoom:80%;" />。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805150251.png" alt="image-20210805150251816" style="zoom:80%;" /><p>可以看到，导入失败，报错：<code>Unable to convert data value to UTF-8 (iconv reports &quot;Illegal byte sequence&quot;). Current encoding is &quot;UTF-8&quot;. Try &quot;LATIN1&quot; (Western European), or one of the values described at http://www.postgresql.org/docs/current/static/multibyte.html.</code></p><p>原因是编码格式不对，打开Options 将编码改为 GBK （中文），如果改成GBK还不行，试试gb18030编码。</p><h3 id="数据详解"><a href="#数据详解" class="headerlink" title="数据详解"></a>数据详解</h3><p>数据是有关纽约市的四个shapefile文件和一个包含社会人口经济数据的数据表。</p><ol><li>nyc_census_blocks</li></ol><h2 id="QGIS"><a href="#QGIS" class="headerlink" title="QGIS"></a>QGIS</h2><p>QGIS教程：<a href="https://www.osgeo.cn/qgis-tutorial/index.html">https://www.osgeo.cn/qgis-tutorial/index.html</a></p><p>QGIS，是一个桌面端GIS查看器/编辑器，用于快速查看数据。</p><p>QGIS可以查看许多数据格式，包括shapefile和PostGIS数据库。</p><p>QGIS，是一个桌面端GIS查看器/编辑器，用于快速查看数据。</p><p>QGIS可以查看许多数据格式，包括shapefile和PostGIS数据库。</p><p>它的图形界面允许我们轻松探索我们的数据，以及快速的对地理要素样式进行设置。</p><p>下载地址：<a href="https://qgis.org/en/site/forusers/download.html">https://qgis.org/en/site/forusers/download.html</a></p><p>对于新用户，推荐独立安装程序。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804230604.png" alt="image-20210804230604759" style="zoom:80%;" /><p>汉化：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805095200.png" alt="image-20210805095200735" style="zoom:80%;" /><p>安装完成之后可以连接postgreSQL数据直接查看数据：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804232220.png" alt="image-20210804232220609" style="zoom:80%;" /><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804232313.png" alt="image-20210804232313533" style="zoom:80%;" /><p>在这张图右下角可以看到使用的坐标系统SRID号为26918。</p><h2 id="GeoServer"><a href="#GeoServer" class="headerlink" title="GeoServer"></a>GeoServer</h2><p>GeoServer教程：<a href="https://ethanblog.com/tech/installation-of-geoserver.html">https://ethanblog.com/tech/installation-of-geoserver.html</a></p><p>GeoServer的是一个基于Java的软件，它允许用户查看和编辑地理空间数据，使用开放地理空间联盟（OGC）提出的开放标准，为地图创建和数据分享提供了强大的便利性。</p><p>GeoServer是OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作，通过 GeoServer 可以比较容易的在用户之间迅速共享空间地理信息。</p><p>主要特性：</p><p>兼容 WMS 和 WFS 特性；支持 PostGIS 、 Shapefile 、 ArcSDE 、 Oracle 、 VPF 、  MySQL 、 MapInfo ；支持上百种投影；能够将网络地图输出为 jpeg 、 gif 、 png 、 SVG 、 KML  等格式；能够运行在任何基于 J2EE/Servlet 容器之上；嵌入 MapBuilder 支持 AJAX  的地图客户端OpenLayers；除此之外还包括许多其他的特性。</p><p>下载地址：<a href="http://geoserver.org/release/2.19.0/">http://geoserver.org/release/2.19.0/</a></p><p>下载进来是一个war包，放到Tomcat里面即可启动服务。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804145336.png" alt="image-20210804145336531" style="zoom:80%;" /><p>启动后，访问地址<a href="http://localhost:8080/geoserver/%E3%80%82">http://localhost:8080/geoserver/。</a></p><p>这时可以设置GeoServer的管理员帐号。帐号admin，密码geoserver。当出现下图时，说明服务器配置成功。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210804233112.png" alt="image-20210804233112513" style="zoom:80%;" /><p>该图即为GeoServer在服务器上的首页。可以在本页进行数据的连接和发布。</p><p>首先，数据区域集中展示了GeoServer服务器上的所有数据和工作区划分，提供数据存储、图层预览、样式编辑等功能。数据区域是我们在实际开发中需要重点关注的地方。</p><ul><li>图层预览提供了GeoServer的所图层配置列表，并提供以各种格式预览。在以后我们继续深入学习后，发布了某一个图层可以来到这里选择进行预览。</li><li>工作区类似我们工作空间，概念可以类比我们进行其他开发时所配置的项目根目录，用于对某一项具体的工作进行统一的管理。对应于GeoServer所用于的web服务，也可以理解为是一个web网站的根目录。</li><li>数据存储用于管理GeoServer的数据存储，我们可以将其理解为为Web服务提供数据支持的“数据库”。</li><li>图层和图层组都是用来发布和管理新图层，并使用组的形式来进行组织和管理。</li><li>styles是用于管理GeoServer发布的样式。</li></ul><p>服务部分主要是面向高级用户的，他们可以在此修改GeoServer提供的请求协议的配置。</p><ul><li>Web Coverage Service (WCS)用于管理元数据信息和WCS、WFS、WMS通用的配置信息，如数据请求读写最大值等。</li><li>Web Feature Service (WFS)用于配置和管理Feature Data、服务级别以及GML输出等。</li><li>Web Map Service (WMS)用于管理和配置栅格数据和SVG选项以及切片地图压缩和分级情况。</li></ul><h3 id="数据发布"><a href="#数据发布" class="headerlink" title="数据发布"></a>数据发布</h3><p>在GeoServer上部署地图数据非常简单，GeoServer支持的数据格式和数据源也很多，发布和部署地图数据涉及到GeoServer的几个重要知识点：<strong>工作区</strong>、<strong>数据存储</strong>和<strong>图层</strong>等概念。</p><ol><li>进入GeoServer首页，点击左侧的工作区（Workspaces），再点击添加新的工作区（Add new workspaces）可以创建工作空间。工作空间的作用是在于将不同数据来源的数据保存在一起。在设置URI时，须设置为<code>http://localhost:8080/china</code>，china代表的是工作空间的名字，这样所有与之相关的网页均在这个URI之后。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805150914.png" alt="image-20210805150914247" style="zoom:80%;" /><ol start="2"><li><p>接下来点击数据存储（Stores），再点击添加新的数据存储（Add new store），可以添加一个新的数据源。GeoServer支持多种数据类型。在这里我们以PostGIS为例进行服务的发布。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806131553.png" alt="image-20210806131553756" style="zoom:80%;" /><p>首先点击PostGIS选项，进入数据源信息的页面。先点击工作区（Workspace）下拉选项，可以选择具体的工作空间，例如本文中选择china。</p><p>接下来输入数据源名称，这是标识不同数据的依据，例如本文中输入gdp。</p><p>在连接参数中，输入host为localhost，端口5432，再输入数据源在PostgreSQL中的数据库名称，之后输入连接PostgreSQL的帐号和密码即可完成数据库的连接。</p><p>在最下面点击保存即可。</p></li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805151308.png" alt="image-20210805151308547" style="zoom:80%;" /><ol start="3"><li>接下来就要发布具体的图层了。点击图层（Layers），即可进入图层选择界面；再点击添加一个新图层（Add a new  resource），即可发布具体的图层。点击后，先选择具体的数据源，会出现该数据源下的各种表，选择需要发布为图层的数据表，点击发布（publish），即可进行发布。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805151504.png" alt="image-20210805151504094" style="zoom:80%;" /><p>可以根据需要输入图层名称，也可以直接使用默认的图层名称。需要注意的是地图投影的定义：</p><p>在这里可以输入地图投影。如果原图没有投影，将不会进行显示，在这里可以点击Find，输入投影的代码（如WGS84为4326）进行查找。接下来在下方的范围中，点击从数据中计算（Compute from data），即可算出范围。</p><p>其他的文本框可以不填。保存之后即为图层的发布。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805151923.png" alt="image-20210805151806217" style="zoom:80%;" /><ol start="3"><li>为了查看发布后的效果，可以点击左侧的Layer Preview，找到刚刚发布的内容。GeoServer提供了多种数据格式可以调用。点击OpenLayers可以直接看到使用OpenLayers调用的图层。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210805153625.png" alt="image-20210805153625854" style="zoom: 67%;" /><h3 id="服务发布"><a href="#服务发布" class="headerlink" title="服务发布"></a>服务发布</h3><p>OGC（Open Geospatial Consortium，开放地理信息协会）是一个非赢利的国际化标准制定组织，领导进行对地理数据相关的操作和服务标准的制定。</p><p>Web Services 即 Web 服务，它是自包含的、模块化的应用程序，它可以在网络中被描述、发布、查找以及调用。Web  服务的一个主要思想，就是未来的应用将由一组应用了网络的服务组合而成。在 Web Services 体系中，所有东西都是服务，这些服务发布一个  API 供网络中的其他服务或者应用使用，并且封装了实现细节。Web Services 是 OGC  规范以及建立面向服务的空间共享体系的基础技术体系。空间信息 Web 服务是在 Web  服务技术和标准基础之上实现的地理空间信息网上在线服务。它利用 Web  服务技术提供的公共接口、交换协议和服务规范，提供应用客户管理、注册服务、编码、处理服务、描述服务和数据服务等。主要的应用客户包括发现客户、地图浏览客户、影像利用客户等。空间信息 Web 服务除了采用基本的 Web 服务技术协议外，还需要相关地理空间信息及处理的技术协议，目前主要有 OGC、ISO/TC211 和 W3C 等组织在进行相关协议标准的制定。 OGC Web 服务（OWS）即是典型的空间信息 Web 服务标准体系。</p><p>OGC Web 服务公共执行规范详细描述了 OWS 接口执行规范包含的公共方面：</p><ul><li>操作请求和响应的内容</li><li>操作请求和响应包含的参数和数据结构</li><li>操作请求和响应的 XML 和 KVP 编码</li></ul><p>OGC 服务类型：</p><ul><li><p>Web 地图服务 (<strong>WMS</strong>，Web Map Service)，用于以<strong>地图图像</strong>的形式提供图层集合</p><p>Web 地图服务（WMS）利用具有地理空间位置信息的数据制作地图。在 WMS 规范中将地图定义为地理数据可视的表现，WMS 返回的不是地图数据，而是地图图像。</p></li><li><p><strong>TMS</strong> 切片地图服务 (Tile map Servcie)定义了一些操作，这些操作允许用户按需访问切片地图，访问速度更快，还支持修改坐标系。</p><p>切片地图服务又叫缓存服务区，地图缓存是使地图和图像服务更快运行的一种非常有效的方法。创建地图缓存时，服务器会在若干个不同的比例级别上绘制整个地图并存储地图图像的副本。然后，服务器可在用户请求使用地图时分发这些图像。对于服务器来说，每次请求使用地图时，返回缓存的图像要比绘制地图快得多。</p><p>切片地图服务的优点：</p><ol><li>由于切片地图服务中的瓦片不需要服务器实时生成，本身存在服务器的硬盘上，所以大大提高了服务器的性能。</li><li>瓦片图片的详细程度不会对服务器分发副本的速度造成显著影响。</li></ol><p>切片服务的缺点：</p><ol><li>切片地图服务由于瓦片图片已经存在，所以该服务实现的功能有限，无法对图层进行一系列操作。</li><li>当缓存级别较高时，占用的硬盘存储量较大。</li></ol></li><li><p>Web 地图切片服务 (<strong>WMTS</strong>，Web Map Tile Service)，用于以缓存地图切片的形式提供地图图层</p><p>WMTS的目的是，更高效快速的加载渲染地图数据。如果海量的地图数据以矢量的形式传输到客户端，在客户端渲染，首先需要消耗大量的网络流量，其次对客户端的CPU也是很大的负荷。考虑到这些情况，WMTS提出预渲染图块的模式，在服务端将地图渲染好，并根据比例尺分割不同的栅格图块，根据客户端的请求，传输这些图块，提供给客户端显示。</p><p>目前，大部分PC端、手机端的地图底图使用的都是这种<strong>栅格瓦片</strong>。</p><p>TMS和WMTS差异主要在于协议、瓦片组织方式，WMTS理论模型更好，TMS来自于OSGeo，WMTS来自于OGC。</p></li><li><p>Web 要素服务 (<strong>WFS</strong>，Web Feature Service)，用于以<strong>矢量要素</strong>的形式提供数据</p><p>WFS 是基于地理要素级别的数据共享和数据操作，WFS 规范定义了若干基于地理要素（Feature）级别的数据操作接口，并以 HTTP  作为分布式计算平台。通过 WFS 服务，客户端可以得到矢量数据格式描述的单个地理要素的空间数据或要素集的空间数据，并可以对单个地理要素进行编辑、 删除、 添加等数据操作。WFS 采用 GML 描述地理要素特征， 根据用户请求的内容返回 GML 描述的空间数据。</p></li><li><p>Web 覆盖服务 (<strong>WCS</strong>，Web Coverage Service)，网络覆盖服务是面向空间影像数据，它将包含地理位置的地理空间数据作为”覆盖（Coverage）”在网上相互交换，如卫星影像、数字高程数据等栅格数据。</p><p>WCS 面向空间影像数据，它将包含地理位置值的地理空间数据作为 “覆盖物（COverage）“在网上相互交换。</p></li><li><p>Web 处理服务 (<strong>WPS</strong>，Web Processing Server)，用于提供地理空间处理功能</p></li></ul><p>可提供 OGC 功能：</p><table><thead><tr><th>服务类型</th><th>WCS</th><th>WFS</th><th>WMS</th><th>WMTS</th><th>WPS</th></tr></thead><tbody><tr><td>地图服务</td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td></td></tr><tr><td>地理数据服务</td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td></td><td></td><td></td></tr><tr><td>影像服务</td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td><td></td></tr><tr><td>地理处理服务</td><td></td><td></td><td></td><td></td><td><img src="https://enterprise.arcgis.com/zh-cn/server/latest/publish-services/linux/GUID-C37FC3E5-A40B-418A-9F4A-1765E05D2358-web.png" alt="支持"></td></tr></tbody></table><p><a href="https://blog.csdn.net/Tmraz/article/details/108749365?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-8.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-8.control">三种服务参数详解</a></p><h4 id="WMS服务"><a href="#WMS服务" class="headerlink" title="WMS服务"></a>WMS服务</h4><p>GeoServer中以OpenLayers方式预览WMS服务发布的地图：</p><ol><li><p>请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/china/wms?service=WMS&amp;version=1.1.0&amp;request=GetMap&amp;layers=china:china_2014gdp&amp;bbox=73.441276550293,18.1598281860352,135.086944580078,53.5617713928223&amp;width=768&amp;height=441&amp;srs=EPSG:4326&amp;styles=&amp;format=application/openlayers</span><br></pre></td></tr></table></figure><p>响应：（一个html文件，地图外部边框）</p></li><li><p>请求：（发起者ol.js）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/china/wms?SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetMap&amp;FORMAT=image%2Fpng&amp;TRANSPARENT=true&amp;STYLES&amp;LAYERS=china%3Achina_2014gdp&amp;exceptions=application%2Fvnd.ogc.se_inimage&amp;SRS=EPSG%3A4326&amp;WIDTH=769&amp;HEIGHT=442&amp;BBOX=70.470703125%2C16.4619140625%2C138.005859375%2C55.2568359375</span><br></pre></td></tr></table></figure><p>响应：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806125217.png" alt="image-20210806125217252" style="zoom:80%;" /></li><li><p>点击地图对象的某个省份，返回属性信息。</p><p>请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/china/wms?SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetFeatureInfo&amp;FORMAT=image%2Fpng&amp;TRANSPARENT=true&amp;QUERY_LAYERS=china%3Achina_2014gdp&amp;STYLES&amp;LAYERS=china%3Achina_2014gdp&amp;exceptions=application%2Fvnd.ogc.se_inimage&amp;INFO_FORMAT=text%2Fhtml&amp;FEATURE_COUNT=50&amp;X=50&amp;Y=50&amp;SRS=EPSG%3A4326&amp;WIDTH=101&amp;HEIGHT=101&amp;BBOX=110.3466794192791%2C38.5839846432209%2C119.2236325442791%2C47.4609377682209</span><br></pre></td></tr></table></figure><p>响应：（一个html文件）</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806125914.png" alt="image-20210806125914280" style="zoom:80%;" /></li></ol><p>WMS 规范定义了三个操作：</p><p>参考：<a href="https://blog.csdn.net/drr789/article/details/8998638?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control">WMS的三大操作</a></p><ol><li><p>GetCapabilities 操作返回服务级元数据，它是对服务信息内容和请求参数的一种描述，元数据使用 XML 形式文件表示；</p><p>请求参数：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806130133.png" alt="image-20210806130133895" style="zoom:80%;" /></li><li><p>GetMap 操作根据客户端发出的请求参数在服务端进行检索，<strong>服务器返回一个地图图象</strong>，其地理空间参数和大小是已经明确定义的，返回的地图图象可以是 GIF，JPEG，PNG 或 SVG 格式的；</p><p>请求参数：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806130203.png" alt="image-20210806130203534" style="zoom:80%;" /></li><li><p>GetFeatureInfo 操作根据用户请求的 X，Y 坐标或感兴趣的图层，返回这些特殊要素的信息，信息以 HTML，GML 或者 ASCII 格式表示。</p><p>请求参数：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806130247.png" alt="image-20210806130247319" style="zoom:80%;" /></li></ol><h4 id="WFS服务"><a href="#WFS服务" class="headerlink" title="WFS服务"></a>WFS服务</h4><p>参考：<a href="https://www.cnblogs.com/naaoveGIS/p/5508882.html">https://www.cnblogs.com/naaoveGIS/p/5508882.html</a></p><p> WFS，即Web要素服务，<strong>支持对地理要素的插入，更新，删除，检索和发现服务</strong>。不同于WMS（Web地图服务）的是，该服务专注于要素的地理信息，而忽略其渲染信息，简化了返回信息。</p><p>一个图层的WFS服务查看方法是在Layer Preview页面，选择WFS下的GeoJSON（以JSON数据形式展现要素信息，方便解析），查看该图层的要素信息。</p><p>一个WFS请求如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/china/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=china%3Achina_2014gdp&amp;maxFeatures=50&amp;outputFormat=application%2Fjson</span><br></pre></td></tr></table></figure><p><strong>GetFeature（获取图层要素）</strong></p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>是否必须</strong></th><th><strong>默认值</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>VERSION</strong></td><td>是</td><td>1.1.0</td><td>version=1.1.0或version=1.0.0</td></tr><tr><td><strong>SERVICE</strong></td><td>是</td><td>WFS</td><td>WFS</td></tr><tr><td><strong>REQUEST=GetFeature</strong></td><td>是</td><td></td><td></td></tr><tr><td><strong>TYPENAME</strong></td><td>是</td><td>text/xml; subtype=gml/3.1.1</td><td></td></tr><tr><td><strong>OUTPUTFORMAT</strong></td><td></td><td></td><td>outputFormat=GML2</td></tr></tbody></table><h4 id="WMTS服务"><a href="#WMTS服务" class="headerlink" title="WMTS服务"></a>WMTS服务</h4><p>Web Map Tile Service（网络地图瓦片服务），简称WMTS，由开放地理信息联盟（Open GeoSpatial Consortium，OGC）制定，是和WMS并列的重要OGC规范之一。WMTS不同于WMS,它最重要的特征是<strong>采用缓存技术能够缓解WebGIS服务器端数据处理的压力</strong>，提高交互响应速度，大幅改善在线地图应用客户端的用户体验。WMTS是OGC主推的缓存技术规范，是目前各种缓存技术相互兼容的一种方法。</p><p>WMTS接口支持的三类资源如下表所示：</p><table><thead><tr><th>操作</th><th>是否必选</th><th>描述</th></tr></thead><tbody><tr><td>GetCapabilities</td><td>是</td><td>获取服务的元信息</td></tr><tr><td>GetTile</td><td>是</td><td>获取切片</td></tr><tr><td>GetFeatureInfo</td><td>否</td><td>获取点选的要素信息</td></tr></tbody></table><p>一个WMTS请求如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/gwc/service/wmts?REQUEST=GetTile&amp;SERVICE=WMTS&amp;VERSION=1.0.0&amp;LAYER=china:china_2014gdp&amp;STYLE=&amp;TILEMATRIX=EPSG:4326:5&amp;TILEMATRIXSET=EPSG:4326&amp;FORMAT=application/vnd.mapbox-vector-tile&amp;TILECOL=48&amp;TILEROW=6</span><br></pre></td></tr></table></figure><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808221539.png" alt="image-20210808221539428" style="zoom:80%;" /><h3 id="矢量切图"><a href="#矢量切图" class="headerlink" title="矢量切图"></a>矢量切图</h3><p>矢量切片的优点是：</p><ul><li><strong>数据在客户端渲染</strong>，而不是在服务器端。这允许不同的地图应用程序使用不同的样式去渲染一个地图，而不需要事先在服务器端（比如GeoServer）进行预先的样式配置。</li><li><strong>矢量切片的大小通常比图片瓦片小</strong>，这可以使得数据传输得更快以及使用更低的带宽。</li><li>GeoServer内嵌的GeoWebCache可以有效地存储矢量切片数据。由于样式由客户端配置，而不是在服务器配置，因此<strong>GeoWebCache只需要存储一个矢量切片就能在客户端配置不同的样式</strong>。</li><li>由于在客户端上可以获取到矢量数据，所以<strong>不需要相应地增加带宽，就可以绘制分辨率很高的地图</strong>。</li><li><strong>客户端可以本地访问实际的要素信息</strong>（属性信息和几何信息），所以可以进行非常复杂和精细的要素渲染。</li></ul><p>矢量切片的主要缺点是需要对地理数据进行预处理，以便客户端能够完成所需的绘图（类似于图像瓦片地图的预处理数据）。<strong>考虑到这一点，矢量切片只能用于渲染</strong>。（虽然是矢量格式，但是它们不可编辑，矢量切片是为了读取和渲染优化的格式，如果想在客户端<strong>编辑要素，最适合的是使用OGC的WFS服务</strong>）</p><p><strong>GeoServer可以生成三种格式的矢量切片：GeoJSON，TopoJSON，MapBox Vector（MVT）</strong>。这些矢量切片格式也得到OpenLayers和其他客户端地图引擎的支持。</p><p>MVT是生产环境中首选的矢量切片格式。</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806150032.jpg" alt="v2-993218ce2e75170788779296d67ba9ba_r" style="zoom: 80%;" /><p>GeoServer的矢量切片插件是官方的插件，下载地址：<a href="http://geoserver.org/release/2.19.0/%E3%80%82">http://geoserver.org/release/2.19.0/。</a></p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806124018.png" alt="image-20210806124018279" style="zoom:80%;" /><p>将下载的内容解压（jar包）并复制到GeoServer的WEB-INF/lib文件夹下。重新启动GeoServer。</p><ol><li><p>验证矢量切片扩展是否已安装成功：打开GeoServer的Web管理界面。单击”<strong>图层</strong>“并随意选择一个矢量图层。</p><p>图层类型（图层可以分为两种类型的数据：栅格和矢量）</p></li></ol><table><thead><tr><th>领域</th><th>描述</th></tr></thead><tbody><tr><td><img src="http://docs.geoserver.org/stable/en/user/_images/raster_icon.png" alt="../../_images/raster_icon.png"></td><td>光栅（栅格）</td></tr><tr><td><img src="http://docs.geoserver.org/stable/en/user/_images/polygon_icon.png" alt="../../_images/polygon_icon.png"></td><td>多边形</td></tr><tr><td><img src="http://docs.geoserver.org/stable/en/user/_images/line_string_icon.png" alt="../../_images/line_string_icon.png"></td><td>线</td></tr><tr><td><img src="http://docs.geoserver.org/stable/en/user/_images/point_icon.png" alt="../../_images/point_icon.png"></td><td>点</td></tr></tbody></table><ol start="2"><li>点击”<strong>TileCaching</strong>“面板，滚动页面到”<strong>Tile Image Formats</strong>“部分，除了标准的GIF/PNG/JPEG格式之外，看到以下内容就表示矢量切片的插件已经安装成功了。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210806150858.png" alt="image-20210806150858530" style="zoom:80%;" /><p>勾选上面红框中的格式点击保存即可发布矢量切图服务。</p><ol start="3"><li>进入Tile Layers，选择pbf预览即可预览效果：</li></ol><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808190237.png" alt="image-20210808190237522"></p><p>效果如下：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808190459.png" alt="image-20210808190459394" style="zoom:80%;" /><p>服务地址需要到点击左上角geoserver图标退回首页，点击右侧的tms：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808233055.png" alt="image-20210808233025537" style="zoom:80%;" /><p>找到发布的服务：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808232955.png" alt="image-20210808232955563" style="zoom:80%;" /><h4 id="GeoWebCache"><a href="#GeoWebCache" class="headerlink" title="GeoWebCache"></a>GeoWebCache</h4><p>参考：<a href="https://www.cnblogs.com/hao-zhang/p/10051159.html">https://www.cnblogs.com/hao-zhang/p/10051159.html</a></p><p>在geoserver1.7版本之后，geoserver本身集成了GeoWebCache这个模块。<strong>GeoWebCache</strong>(GWC)是一个采用Java实现用于缓存WMS（Web Map Service）Tile的开源项目。当地图客户端请求一张新地图和Tile时，GeoWebCache将拦截这些调用然后返回缓存过的Tiles。如果找不到缓存再调用服务器上的Tiles，从而提高地图展示的速度。实现更好的用户体验。 </p><ol><li>GWC支持多种来源的瓦片，比如ArcGIS的瓦片。</li><li>GWC支持多种请求，比如WMS、WMS-C、WMTS、TMS、Googl Maps KML和Virtual Earth。</li><li>GWC支持在第一次请求地图某范围时，将此范围内的地图按照配置的信息进行切图缓存。第二次同样请求此范围的地图时，直接读取缓存瓦片进行加速显示。此功能类似于AGS的动态出图。</li><li>GWC同时也支持预先将瓦片按照配置信息切完，地图加载时直接读取瓦片。此功能类似于AGS的瓦片缓存出图。</li></ol><p>对比两个服务的url：<br><code> http://localhost:8680/geoserver/wms</code><br><code> http://localhost:8680/geoserver/gwc/service/wms</code></p><p>可以看见两者的区别仅仅在于，当<strong>请求的URL中加上gwc/service后，便可以开启瓦片缓存服务</strong>了。</p><h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><p>要想外部程序能够调用地图服务，首先需要对GeoServer进行跨域配置。</p><p>开启<code>CORS</code>跨域请求访问的方法，即在<code>webapps/geoserver/WEB-INF/web.xml</code>中添加以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,HEAD,OPTIONS,PUT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后重启Tomcat使配置生效。</p><h2 id="前端开源JS库"><a href="#前端开源JS库" class="headerlink" title="前端开源JS库"></a>前端开源JS库</h2><p><strong>Web的地图API分类</strong>：</p><ul><li>Charts：以D3.js，Echarts等为代表。</li><li>LBS：以高德/谷歌/百度地图等为代表。</li><li>WebGIS商业API：ESRI的ArcGIS API For JS，超图的IClient。</li><li>WebGIS开源API:   Leaflet，OpenLayers，Cesium，MapboxGL等。</li></ul><p><strong>应用场景</strong>：</p><ul><li><p>Charts类型在各种业务页面或后台管理页面很常见，适用业务场景是地图非页面表达的主体，且几乎没有交互，页面中同时还有其他各类主题。</p></li><li><p>LBS（基于位置的服务）广泛应用于互联网类应用，在这个时代人们的衣食住行与这些地图网站、地图APP及其背后的地理信息服务日益紧密。LBS必须要在连接互联网场景中使用，只能使用地图服务商提供的数据和服务，最多支持自定义用户标记若干兴趣点的简单操作，复杂企业级地理数据展示分析等几乎无能为力。</p></li></ul><p><strong>WebGIS发展历程</strong>：</p><p>Html5标准确立前，Flex，JS，Silverlight作为前端开发的主要技术，这个时代JS还没有取得优势，产品都以Flex为首推。WebGIS以ArcGIS的Flex API（也有JS版）和开源的OpenScale（openlayer2 是其JS版）为代表。随着时代发展，移动互联网的崛起，H5标准发布，H5技术及其主力语言JS获得一统前端的地位，很多基于H5标准的WebGIS引擎纷纷入场，WebGIS H5时代开启。</p><ul><li>2011年3月，<strong>WebGL</strong>1.0标准发布。（浏览器渲染技术（如WebGL），让浏览器可以借助系统显卡展示2D和3D地图，还能创建复杂的导航和数据视觉化效果）</li><li>2011年5月，<strong>Leaflet</strong>发布v0.1版本，基于H5草案，只来得及支持Canvas，与WebGL擦肩而过，以后也再没实现WebGL。</li><li>2012年底，H5标准发布。</li><li>2013年中，<strong>OpenLayer</strong>3测试版发布，与OpenLayer2不同，3是基于H5标准完全重写的，并不是迭代升级，而是一个全新的产品，只是继承了Openlayer这个已获得认可的名称与产品定位，应该说产品定位继承的相当彻底且发扬光大，只是过于保守，从而没能设想进入三维，满足于自己的二维领域。</li><li>2013年制定WebGL2.0标准。</li><li>2014年秋，<strong>Cesium</strong>发布1.0版本，开源WebGIS引擎进入三维时代。</li><li>2016年春，ArcGIS API for JS 4.0发布，商业WebGIS引擎进入三维时代。</li><li>2017年2月，WebGL2.0标准发布。</li><li>2019年中，<strong>MapboxGL</strong>发布1.0版本，地图可视化从功能迈向了性能，颜值等方向，更多人发现原来地图还可以这样展示，更多的客户需要更加个性化的地图更加舒服的用户体验。</li><li>2020年12月，MapboxGL发布2.0版本，支持三维相机参数，地形，地图最大倾角从60°到85°等，终于摆脱2.5D的产品印象。</li></ul><p><strong>WebGIS引擎各自特点与适用业务场景</strong>：</p><ul><li> <strong>LeafLet</strong>，Canvas渲染机制，仅支持二维表达，地图坐标系墨卡托投影，不支持球，特点是入手简单，缺陷是不支持webgl渲染性能有瓶颈，适用于轻量级简单地理信息主题可视化。</li><li> <strong>OL6</strong>，WebGL渲染机制，仅支持二维表达，不限制坐标系，不支持球，特点是二维GIS功能最丰富全面，缺陷地图样式简单，难以定制高颜值的可视化效果，不支持三维，适用于传统地理信息强GIS的二维数据Web维护和展示，面向公网地图颜值上有些上不了台面。</li><li> <strong>Cesium</strong>，WebGL渲染机制，二三维一体化，经纬度坐标系，支持球，明星数据格式是3DTiles，特点是唯一开源的WebGIS三维引擎，缺陷是卡，体验差，地图丑，原因应该是为了支持球，所有的平面瓦片都要进行纹理转换贴球，计算量偏大，最新的矢量切片也是变成图片再纹理转换到球上，栅格化严重一点都不精美，可以说为了球，牺牲了太多性能和地图美观度，适用于Web强三维应用场景。</li><li> <strong>ArcGIS API JS 4</strong>，对标Cesium，明星数据格式是I3S，也有类似Cesium的问题，但由于有ArcGIS平台的体系支持，应该功能最强大，但是如果不采购这个平台体系，纯API很鸡肋，适合采购了商业平台的用户，如政府采购再定制应用方式。</li><li> <strong>MapboxGL</strong>，WebGL渲染机制，二三维一体化，墨卡托坐标系，不支持球，明星数据格式是矢量切片，特点是最具美感的专题地图，缺点是没有球，最新2.0必须联网验证token，适用于互联网场景复杂地理信息表达，内网追求地图可视化效果的也适用，Mapbox很多优化都是基于互联网场景的。</li></ul><p>在WebGIS 3D领域，比较有争议性的是cesium与mapboxgl。       </p><p>对于Cesium的API用户来说，加载倾斜摄影，点云数据，地形数据都是直接调用引擎API就可以了，即使不懂WebGL也很快能做个三维的地图样子，当然高级开发者还会基于WebGL开发自定义高级显示效果。</p><p>对于Mapbox的API用户来说，2.0版本之前三维不足，主打的<strong>二维的矢量切片技术</strong>，并且切片加载机制导致倾角太大性能很差，因此引擎限制了最大倾角为60°，看起来就很像2.5D的东西。类似Cesium的三维功能只能依靠Deck.gl等库去集成，万幸的是引擎开放了自定义WebGL图层功能，高级开发者可以定制自己的三维图层，但坑爹的是没有三维相机参数需要自己源码扩展。2.0版本之后新增的地形3D展示，三维开发需要的相机参数，地图倾角限制从60°改成85°，比较有三维感觉了，效果辅助和性能优化方向考虑的Sky  API等，显示了MapboxGL开始在三维方向发力，但<strong>仍然没有在官方API层面支持倾斜摄影的3Dtiles，点云等</strong>，不熟悉WebGL的开发者使用仍然很困难。除此以外，值得警惕的地方是<strong>2.0的开源协议从商业友好的BSD-3改成了Mapbox自己的使用协议，无论是否使用Mapbox资源强制进行在线token计数</strong>，等于完全放弃了内网用户（不联网没法计数等于没法用），因此从安全和商业应用开发角度，请不要升级到2.0，保持在1.13版本进行企业定制化开发。</p><p>虽然mapbox更改了使用协议，但不否认它仍是家伟大的公司，在现有的技术体系下，开创性的提出数据用矢量切片技术，图标用sprite（互联网应用场景的同学很熟悉，减少网络请求的优化，合并的图标纹理减少webgl渲染的调用命令次数），字体用字体pbf切片，就是怎么极致优化怎么做，强大的技术流风格。</p><p><strong>后H5时代的WebGIS</strong>：</p><p>把时间线后移4，5年，在后H5时代的WebGIS会形成“云渲染”、“WebAssemble”、“WebGPU”新的三足鼎立。</p><ul><li>云渲染</li></ul><p>​    原理：C端使用游戏引擎做数据可视化，可视化的结果通过视频流传到客户端显示。</p><p>​    优点：游戏引擎比较成熟，效果好，三维大量数据，美术资源等不用传到客户端。</p><p>​    缺点：完全放弃日益先进强大的客户端计算资源（摩尔定律），完全依靠服务器资源，导致服务器资源投入很大，如果有高并发，起码得有分布式GPU计算引擎吧？所以不可能广泛应用，业务场景很小，只适合大屏可视化目前。</p><ul><li>WebAssemble</li></ul><p>​     原理：能让c++,rust等高性能语言写的功能以wasm形式在Web端应用，弥补JS性能的缺陷，（经过谷歌V8引擎优化，JS的性能也是直逼后台，缺陷有点牵强，而且前端计算可以使用GPGPU，WebWork等技术在gpu，在多线程非阻塞计算）当然更主要的用处是有利于原先C端图形软件如CAD，GoogleEarth搬到BS上，例如GoogleEarth的BS版已经实现了。</p><p>​     优点：可以用高性能语言写的算法应用到前端改进JS的算法（牵强，实际投入产出比不大对绝大部分公司），大量的后端程序员开始进入前端搞事情，前端不再是JS程序员的前端（从性能方向考虑甚至产生是否WebAssemble会取代JS的疑问）。</p><p>​       缺点：WebAssemble不能操作dom，因此它只是一个补充，给前端留个“后路”而已，并没有取代JS的能力也没有这样的定位。另外业务应用场景非常狭窄，只适合有成熟C端图形产品搬到BS，对一般业务产品冲击不大。从公司角度如果没有C端成熟图形产品就不值得投入，从程序员个人角度，如果是JS程序员可以直接无视，这种技术不会对你产生任何影响，如果是后端程序员，可以兴奋起来，你可以去前端玩玩了。。。</p><ul><li>WebGPU</li></ul><p>​    原理：下一代Web图形引擎，WebGL的替代者，业务场景就是现在用WebGL的地方，将来也都是WebGPU应用的场景。</p><p>​     优点：BS端的图形引擎与C端几乎一致（差半代），可以设想很多原先只有C端能做的酷炫效果B端也能做。（WebGL与C端差了好多代了，所以没法做出能追上C端效果的东西）</p><p>​     缺点：目前正式标准还没发布，那么基于WebGPU的图形，GIS引擎当然也没有了，就算有了，酷炫效果也不是GIS API这种，更多是图形学领域，大部分目前的业务API开发者会失去竞争力。</p><p><strong>总结</strong>：</p><p>如果不懂图形学原理，就算使用了WebGL的GIS引擎是做不出符合业务发展的东西来的，顶多加加地形加个建筑做做项目而已，稍微个性化的展示都做不了。从后H5时代来看，一方面可能C++,Rust等技术会更加如鱼得水，那么依靠JS的程序员和依靠JS实现可视化的公司只能抱紧WebGPU的大腿，要在图形学领域持续进行技术投入，纯调用API实现效果的时代一去不复返了，更加先进的图形引擎与更加灵活的渲染管线，再与更加个性化的业务展示要求结合与促进，会产生新的思想碰撞和化学反应，如果个人和公司跟不上，那么在下个时代，才真的是遇到”降维打击”了。</p><p>地理可视化（尤其3D）的未来并不属于GIS，而是属于图形学，所谓万变不离其宗。</p><h3 id="OpenLayers"><a href="#OpenLayers" class="headerlink" title="OpenLayers"></a>OpenLayers</h3><p>OpenLayers（<a href="http://openlayers.org/">http://openlayers.org</a>）是一个专为 Web GIS 客户端开发提供的<strong>二维GIS</strong> JavaScript 类库包，用于实现标准格式发布的地图数据访问。由于自身较为重的原因，难于扩展，社区生态插件比较少，主要还是依赖官方的库实现绘制编辑功能。</p><p>OpenLayers 支持的地图来源包括  Google Maps、Yahoo、 Map、微软 Virtual Earth 等，用户还可以用简单的图片地图作为背景图，与其他的图层在  OpenLayers 中进行叠加。除此之外，OpenLayers 实现访问地理空间数据的方法都符合行业标准。OpenLayers 支持 Open GIS 协会制定的 WMS（Web Mapping Service）和 WFS（Web Feature  Service）等网络服务规范，可以通过远程服务的方式，将以 OGC 服务形式发布的地图数据加载到基于浏览器的 OpenLayers  客户端中进行显示。</p><p>使用开源的 GeoServer 和 OpenLayers 发布地图服务在 Web GIS 部署中比较常用。</p><h3 id="Leaflet"><a href="#Leaflet" class="headerlink" title="Leaflet"></a>Leaflet</h3><p>leaflet(<a href="https://leafletjs.com/)%E6%98%AF%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%9A%84**%E4%BA%8C%E7%BB%B4GIS**%E7%9A%84JS%E5%BA%93%E3%80%82%E5%AE%9E%E7%8E%B0%E7%BB%98%E5%88%B6%E7%BC%96%E8%BE%91%E5%8F%AF%E4%BB%A5%E4%BE%9D%E9%9D%A0%E7%A4%BE%E5%8C%BA%E7%9A%84%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%9C%89">https://leafletjs.com/)是一个轻量的**二维GIS**的JS库。实现绘制编辑可以依靠社区的插件，主要有</a> Leaflet.draw 、Leaflet.geoman(前身为Leaflet.pm)、Leaflet.Editable等绘制插件。</p><h3 id="MapboxGL"><a href="#MapboxGL" class="headerlink" title="MapboxGL"></a>MapboxGL</h3><p>MapboxGL不同于Mapbox，MapboxGL底层采用webGL实现，性能和体验显著的提升，Mapbox则是采用leaflet。MapboxGL在用户体验和性能上个人觉得都是最优的，gl版本起步较晚。社区生态插件也不是很多，但是官方也提供了相应的绘制插件。</p><p>官方提供了插件  mapbox-gl-draw ，总体来看，该库封装得较为成熟，最重要的是它在大数据量下的编辑一点都不卡(仅编辑点击的时候添加控制点)。</p><p>Mapbox地图使用矢量切片技术和地图渲染技术（Mapbox GL）实现。前端通过Mapbox GL JS进行渲染，Mapbox GL JS是一个Java Script库，使用WebGL渲染交互式矢量瓦片地图和栅格瓦片地图，渲染性能高。它能够解析各种来源的矢量数据，然后在客户端实时渲染生成带有几何图形、文字标注、图示符号3D场景地图。Mapbox GL JS不仅能够渲染大数据量的地图要素，拥有流畅的交互以及动画效果，而且还可以显示立体地图。 </p><p>mapbox.js 和 mapbox-gl.js有什么区别？</p><p>相同点：</p><p>1、两者都是Mapbox公司推出的免费（每月有使用次数的限制）开源的JavaScript库</p><p>2、都可以作为前端渲染矢量瓦片交互地图的工具（WMS、普通瓦片等地图也都支持）</p><p>3、它们的样式设置都是支持Mapbox Style的</p><p>主要的不同点：</p><p>1、Mapbox.js是Leaflet的一个插件，使用方式是通过结合leaflet使用。</p><p>2、mapbox-gl.js 则是使用WebGL技术独立渲染前端库，不需要结合其它渲染引擎（比如Leaflet、OpenLayer）来使用。</p><p>3、使用mapbox-gl.js的浏览器必须支持WebGL渲染，在老旧的浏览器中是不支持mapbox-gl.js的。而mapbox.js则没有此限制。</p><h4 id="MapboxGL基础"><a href="#MapboxGL基础" class="headerlink" title="MapboxGL基础"></a>MapboxGL基础</h4><p>MapboxGL的地图对象Map有<strong>参数</strong>，<strong>实例成员</strong>和<strong>事件</strong>。</p><ol><li><p>参数：</p><p><strong>container</strong>（进行地图渲染的 dom元素id）、style（地图样式）、zoom（地图初始化时的层级）、center（地图初始化时的地理中心点）等；</p></li><li><p>实例成员：</p><p><strong>addSource</strong>(id,source)添加数据源、<strong>addLayer</strong>(layer)添加图层、loadImage(url,callback)、addImage(id,image)等</p></li><li><p>事件：</p><p>比如on(type,listener)，可以为特定类型的事件添加监听器，其中type(string)添加监听器的事件类型，（包括’mousedown’ ， ‘mouseup’ ，’mousemove’、’click’、’load’），listener(Function)事件被触发时调用的函数；</p></li></ol><p>数据源<code>Source</code>表明地图应显示哪些数据。使用<code>“type”</code>属性指定源的类型，该属性必须是 vector, raster, raster-dem, geojson, image, video（矢量，栅格，栅格dem，geojson，图像，视频）之一。</p><blockquote><p>GeoJSON源数据必须通过<code>data</code>属性提供，其属性可以是URL或内联GeoJSON。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;geojson-marker&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;geojson&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="string">&quot;geometry&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>,</span><br><span class="line">            <span class="string">&quot;coordinates&quot;</span>: [-<span class="number">77.0323</span>, <span class="number">38.9131</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Mapbox DC&quot;</span>,</span><br><span class="line">            <span class="string">&quot;marker-symbol&quot;</span>: <span class="string">&quot;monument&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个<code>Source</code>不足以使数据显示在地图上，因为<code>source</code>不包含颜色或宽度等样式细节。图层<code>Layer</code>为<code>source</code>提供可视化表示。这样就可以以不同的方式对同一<code>source</code>进行样式设置。</p><blockquote><p><code>id</code>是唯一的图层名称。</p><p>图层的类型由<code>&#39;type&#39;</code>属性指定，并且必须是<code>background</code>, <code>fill</code>, <code>line</code>, <code>symbol</code>, <code>raster</code>, <code>circle</code>, <code>fill-extrusion</code>, <code>heatmap</code>, <code>hillshade</code>（背景（颜色或者图案），填充（具有可选描边边框的填充多边形），线，符号（图标或文字标签），栅格，实心圆，拉伸的（3D）多边形，热图，山体阴影）。</p><p>除了背景类型的图层外，每个图层都需要引用源<code>source</code>。图层将从源中获取数据。</p><p>图层具有两个子属性，这些子属性确定如何渲染该图层中的数据：布局<code>layout</code>和绘画<code>paint</code>属性。</p><p>布局属性显示在图层的<code>layout</code>对象中。它们将在渲染过程的早期应用，绘画属性将在稍后的渲染过程中应用。绘画属性显示在图层的<code>paint</code>对象中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;layers&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;water&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;fill&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;mapbox-streets&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paint&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;fill-color&quot;</span>: <span class="string">&quot;#00ffff&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>简单demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Display a map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    &lt;-- 引入相关的库 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问令牌accessToken</span></span></span><br><span class="line"><span class="language-javascript">    mapboxgl.<span class="property">accessToken</span> = <span class="string">&#x27;pk.eyJ1IjoieGlhb3NoaWhkIiwiYSI6ImNrNngzYnRhdzBqNm0zZnJ4eWZjdndrYzkifQ.qQjf8zANr9PsMpwq2NsRWQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 地图对象Map</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>, <span class="comment">// Mapbox GL JS 进行地图渲染的 HTML 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">style</span>: <span class="string">&#x27;mapbox://styles/mapbox/streets-v11&#x27;</span>, <span class="comment">// 地图的 Mapbox 配置样式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">center</span>: [-<span class="number">74.5</span>, <span class="number">40</span>], <span class="comment">// 地图初始化时的地理中心点 [lng, lat]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">zoom</span>: <span class="number">9</span> <span class="comment">// 地图初始化时的层级</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出最核心的代码就是 <code>style: &#39;mapbox://styles/mapbox/streets-v11&#39;</code>，他包含了所有的地图样式。</p><p>将style分解，为后面离线部署提供解决方案,具体可以查看一下<a href="https://www.mapbox.com/mapbox-gl-js/style-spec">style api</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Display a map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    &lt;-- 引入相关的库 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问令牌accessToken</span></span></span><br><span class="line"><span class="language-javascript">    mapboxgl.<span class="property">accessToken</span> = <span class="string">&#x27;pk.eyJ1IjoieGlhb3NoaWhkIiwiYSI6ImNrNngzYnRhdzBqNm0zZnJ4eWZjdndrYzkifQ.qQjf8zANr9PsMpwq2NsRWQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 地图对象Map</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>, <span class="comment">// Mapbox GL JS 进行地图渲染的 HTML 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">style</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;version&quot;</span>: <span class="number">8</span>, <span class="comment">// 这个JS SDK对应版本必须为8。</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mapbox Streets&quot;</span>, <span class="comment">// 样式的命名</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;sprite&quot;</span>: <span class="string">&quot;mapbox://sprites/mapbox/streets-v8&quot;</span>, <span class="comment">// 将一个地图涉及到的所有零星图标图片都包含到一张大图中去</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;glyphs&quot;</span>: <span class="string">&quot;mapbox://fonts/mapbox/&#123;fontstack&#125;/&#123;range&#125;.pbf&quot;</span>, <span class="comment">// .pbf格式的字体样式，例如微软雅黑等字体库</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;sources&quot;</span>: &#123; <span class="comment">// 图层的资源文件，可以支持矢量切片、栅格、dem栅格、图片、geojson、视频等格式。</span></span></span><br><span class="line"><span class="language-javascript">                     <span class="string">&quot;mapbox-streets&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;type&quot;</span>: <span class="string">&quot;vector&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;url&quot;</span>: <span class="string">&quot;mapbox://mapbox.mapbox-streets-v6&quot;</span></span></span><br><span class="line"><span class="language-javascript">                     &#125;</span></span><br><span class="line"><span class="language-javascript">                 &#125;,</span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;layers&quot;</span>: [ <span class="comment">// 对每个图层样式的描述，这里就是对地图样式渲染的关键，可以做很多精美的设计。</span></span></span><br><span class="line"><span class="language-javascript">                     &#123;</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;id&quot;</span>: <span class="string">&quot;water&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;source&quot;</span>: <span class="string">&quot;mapbox-streets&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;source-layer&quot;</span>: <span class="string">&quot;water&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;type&quot;</span>: <span class="string">&quot;fill&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                         <span class="string">&quot;paint&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                             <span class="string">&quot;fill-color&quot;</span>: <span class="string">&quot;#00ffff&quot;</span></span></span><br><span class="line"><span class="language-javascript">                         &#125;</span></span><br><span class="line"><span class="language-javascript">                     &#125;</span></span><br><span class="line"><span class="language-javascript">                 ]</span></span><br><span class="line"><span class="language-javascript">             &#125;, <span class="comment">// 地图的 Mapbox 配置样式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">center</span>: [-<span class="number">74.5</span>, <span class="number">40</span>], <span class="comment">// 地图初始化时的地理中心点 [lng, lat]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">zoom</span>: <span class="number">9</span> <span class="comment">// 地图初始化时的层级</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="接入WMS服务"><a href="#接入WMS服务" class="headerlink" title="接入WMS服务"></a>接入WMS服务</h4><p>官方教程：<a href="https://docs.mapbox.com/mapbox-gl-js/example/wms/">https://docs.mapbox.com/mapbox-gl-js/example/wms/</a></p><p>参考：<a href="https://blog.csdn.net/hequhecong10857/article/details/113881004">https://blog.csdn.net/hequhecong10857/article/details/113881004</a></p><ol><li>确保成功发布WMS服务并且配置好跨域。</li><li>在点击Openlayers预览图层时，打开调试工具，点击NetWork可获取tiles的<code>url</code>，需要将bbox参数用<code>&#123;bbox-epsg-3857&#125;</code>替换，之后修改坐标系为<code>&amp;SRS=EPSG:3857</code>（Mapbox GL支持的是<code>EPSG:3857</code>（Web墨卡托）坐标）。加载的时候，Mapbox GL会自动替换成对应的参数，这样地图就可以加载了。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808195751.png" alt="image-20210808195750909" style="zoom:80%;" /><ol start="3"><li>在点击Openlayers预览图层时，打开调试工具，点击查询图层要素，NetWork中会出现一个请求<code>url</code>，而<code>axios</code>请求的<code>url</code>只需将<code>INFO_FORMAT</code>参数由<code>text/html</code>替换成<code>application/json</code>即可，获取到<code>json</code>数据后，可根据实际进行下一步操作。</li></ol><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808202041.png" alt="image-20210808201040795" style="zoom:80%;" /><ol start="4"><li>BBOX是以SRS单位表示的边界框边角 (左下角，右上角)，但是点击返回的是点击点的坐标。需要进行换算，需要注意的是点击返回的坐标是经纬度，还需要转换成墨卡托坐标，之后请求的SRS也需要变成<code>EPSG:3857</code>。</li></ol><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            Add a WMS source and query</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>/&gt;</span></span><br><span class="line">        &lt;-- 引入相关的库 --&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Axios网络请求库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--地理空间分析库 https://turfjs.fenxianglu.cn/ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@turf/turf@6.3.0/turf.min.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">                <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 访问令牌accessToken</span></span></span><br><span class="line"><span class="language-javascript">                mapboxgl.<span class="property">accessToken</span> = <span class="string">&#x27;pk.eyJ1IjoieGlhb3NoaWhkIiwiYSI6ImNrNngzYnRhdzBqNm0zZnJ4eWZjdndrYzkifQ.qQjf8zANr9PsMpwq2NsRWQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 地图对象Map</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>, <span class="comment">// Mapbox GL JS 进行地图渲染的 HTML 元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">style</span>: <span class="string">&#x27;mapbox://styles/mapbox/streets-v11&#x27;</span>, <span class="comment">// 地图的 Mapbox 配置样式</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">zoom</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">center</span>: [<span class="number">112</span>, <span class="number">28</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 地图加载的时候调用WMS服务</span></span></span><br><span class="line"><span class="language-javascript">                map.<span class="title function_">on</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="title function_">addSource</span>(<span class="string">&#x27;wms-source&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;raster&#x27;</span>,  <span class="comment">// 栅格数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;tiles&#x27;</span>: [</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;http://localhost:8088/geoserver/china/wms?SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetMap&amp;FORMAT=image%2Fpng&amp;TRANSPARENT=true&amp;STYLES&amp;LAYERS=china%3Achina_2014gdp&amp;exceptions=application%2Fvnd.ogc.se_inimage&amp;WIDTH=769&amp;HEIGHT=442&amp;BBOX=&#123;bbox-epsg-3857&#125;&amp;SRS=EPSG:3857&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        ],</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;tileSize&#x27;</span>: <span class="number">256</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="title function_">addLayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;wms-layer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;raster&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;wms-source&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;paint&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;raster-opacity&#x27;</span>: <span class="number">0.5</span>  <span class="comment">// 设置透明度</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                                 <span class="string">&#x27;aeroway-line&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                                );</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 地图点击的时候进行属性查询</span></span></span><br><span class="line"><span class="language-javascript">                map.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        lng,</span></span><br><span class="line"><span class="language-javascript">                        lat</span></span><br><span class="line"><span class="language-javascript">                    &#125; = e.<span class="property">lngLat</span>; <span class="comment">// 点击返回的是点击位置的经纬度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> radius = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">22</span> - map.<span class="title function_">getZoom</span>());</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 以下为墨卡托坐标下的换算过程</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> pointM = turf.<span class="title function_">toMercator</span>(turf.<span class="title function_">point</span>([lng, lat]));  <span class="comment">// 转换成EPSG:3857坐标系(墨卡托)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> pointC = pointM.<span class="property">geometry</span>.<span class="property">coordinates</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> bbox = [pointC[<span class="number">0</span>] - radius, pointC[<span class="number">1</span>] - radius, pointC[<span class="number">0</span>] + radius, pointC[<span class="number">1</span>] + radius];</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> url =</span></span><br><span class="line"><span class="language-javascript">                          <span class="string">&#x27;http://localhost:8088/geoserver/china/wms?SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetFeatureInfo&amp;FORMAT=image%2Fpng&amp;TRANSPARENT=true&amp;QUERY_LAYERS=china%3Achina_2014gdp&amp;STYLES&amp;LAYERS=china%3Achina_2014gdp&amp;exceptions=application%2Fvnd.ogc.se_inimage&amp;INFO_FORMAT=application%2Fjson&amp;FEATURE_COUNT=50&amp;X=50&amp;Y=50&amp;SRS=EPSG:3857&amp;WIDTH=101&amp;HEIGHT=101&amp;BBOX=&#x27;</span> +</span></span><br><span class="line"><span class="language-javascript">                          bbox.<span class="title function_">join</span>();</span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(url)  <span class="comment">// Axios进行网络请求</span></span></span><br><span class="line"><span class="language-javascript">                        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">features</span>[<span class="number">0</span>].<span class="property">properties</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实现效果</strong></p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210808211120.png" alt="image-20210808211120574" style="zoom:80%;" /><h4 id="接入矢量瓦片服务"><a href="#接入矢量瓦片服务" class="headerlink" title="接入矢量瓦片服务"></a>接入矢量瓦片服务</h4><p>参考这两篇：</p><p><a href="https://blog.csdn.net/qq_34870529/article/details/92768540">https://blog.csdn.net/qq_34870529/article/details/92768540</a></p><p><a href="https://blog.csdn.net/hequhecong10857/article/details/113895245?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&spm=1001.2101.3001.4242">Mapbox GL 加载GeoServer发布的矢量切片</a></p><p>Mapbox GL只支持坐标为EPSG:3857的矢量切片，而GeoServer（version 2.13.3）默认没有该坐标系的Gridsets，需要自己手动创建。</p><p>创建名为EPSG:3857的Gridsets（缩放层级可自行控制，我在此处共设置了22层）：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210809153919.png" alt="image-20210809153919417" style="zoom:80%;" /><p>之后添加新的图层、添加新的数据存储。</p><p>之后添加新的图层并发布图层：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210809154405.png" alt="image-20210809154405831" style="zoom:80%;" /><p>切换到Tile Caching（添加刚才定义好的Gridsets 3857）：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210809154328.png" alt="image-20210809154328641" style="zoom:80%;" /><p>在Tile Layers页面可以看到发布的服务：</p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20210809161938.png" alt="image-20210809161938035" style="zoom:80%;" /><p>3857我预览总是出不来数据。</p><p>4326和900913都可以。</p><p>在矢量切图教程中获取到了服务的URL。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/gwc/service/tms/1.0.0/china%3Achina_2014gdp@EPSG%3A900913@pbf</span><br></pre></td></tr></table></figure><p>拼接服务地址供mapbox调用：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/geoserver/gwc/service/tms/1.0.0/china%3Achina_2014gdp@EPSG%3A900913@pbf/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf</span><br></pre></td></tr></table></figure><p>4326Mapbox调用后不显示，但是900913和3857都成功显示。这也证明3857其实没必要建立。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            Display a map</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>/&gt;</span></span><br><span class="line">        &lt;-- 引入相关的库 --&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">                <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 访问令牌accessToken</span></span></span><br><span class="line"><span class="language-javascript">                mapboxgl.<span class="property">accessToken</span> = <span class="string">&#x27;pk.eyJ1IjoieGlhb3NoaWhkIiwiYSI6ImNrNngzYnRhdzBqNm0zZnJ4eWZjdndrYzkifQ.qQjf8zANr9PsMpwq2NsRWQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 地图对象Map</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>, <span class="comment">// Mapbox GL JS 进行地图渲染的 HTML 元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// style: &#x27;mapbox://styles/mapbox/light-v10&#x27;, // 地图的 Mapbox 配置样式</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">style</span>: <span class="string">&#x27;mapbox://styles/mapbox/satellite-v9&#x27;</span>, <span class="comment">//卫星图</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">zoom</span>: <span class="number">4</span>, <span class="comment">// 地图初始化时的层级</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">center</span>: [<span class="number">112</span>, <span class="number">28</span>] <span class="comment">// 地图初始化时的地理中心点 [lng, lat]</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                map.<span class="title function_">on</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="title function_">addSource</span>(<span class="string">&#x27;tms-source&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;vector&#x27;</span>,  <span class="comment">// 矢量数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;scheme&quot;</span>:<span class="string">&quot;tms&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;tiles&#x27;</span>: [</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// &#x27;http://localhost:8088/geoserver/gwc/service/tms/1.0.0/china%3Achina_2014gdp@EPSG%3A900913@pbf/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;http://localhost:8088/geoserver/gwc/service/tms/1.0.0/northLaker%3Alakemaxextent_north@EPSG%3A3857@pbf/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        ],</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="title function_">addLayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;tms-layer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;fill&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;tms-source&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// &quot;source-layer&quot;: &quot;china_2014gdp&quot;,  // 图层名称</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;source-layer&quot;</span>: <span class="string">&quot;lakemaxextent_north&quot;</span>,  <span class="comment">// 图层名称</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;paint&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;fill-color&quot;</span>:<span class="string">&quot;#ff0000&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;fill-opacity&quot;</span>:<span class="number">0.3</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加mapbox自带菜单</span></span></span><br><span class="line"><span class="language-javascript">                map.<span class="title function_">addControl</span>(<span class="keyword">new</span> mapboxgl.<span class="title class_">NavigationControl</span>());</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mapbox样式"><a href="#Mapbox样式" class="headerlink" title="Mapbox样式"></a>Mapbox样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapboxStyle = [</span><br><span class="line">    <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/Bkl7eaQNyU&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/HJeN6h7VyL&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/ByetWaXVJL&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mapbox://styles/mapbox/satellite-v9&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>自定义样式其实就是返回配置的json文件，在json文件里面调用矢量瓦片的接口请求数据源：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;updatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-12-23T07:04:03.832Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aolutong&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pbf&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ln_peak&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ln_peak&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-12-23T06:56:35.787Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vector_layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fieldalias&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dists_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;区划代码&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;town_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;乡镇行政区代码&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;town_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;所属乡镇&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;市级行政代码&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;所属市级&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;province_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;省份行政代码&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;province_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;所属省份&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类型&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;名称&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dists_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;town_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;town_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;province_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;province_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;山峰&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ln_peak&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;center&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">125.530673</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">40.784181</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">18</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">73.49735</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">6.318649</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">134.773613</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">53.561648</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;maxzoom&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;minzoom&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;http://124.70.71.54:8080/api/v1/tilesets/aolutong/ln_peak/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tilejson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tileset_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ln_peak&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Markers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#menu</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#menu2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeSize(true);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:40px;height:40px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;icons/Zoomin.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span> <span class="attr">height</span>=<span class="string">&quot;25&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;放大&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeSize(false);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:40px;height:40px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;icons/Zoomout.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span> <span class="attr">height</span>=<span class="string">&quot;25&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;缩小&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;style&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;true&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle(0);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:20px;height:20px&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阳光白&quot;</span>&gt;</span>阳光白</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;style&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle(1);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:20px;height:20px&quot;</span> <span class="attr">value</span>=<span class="string">&quot;暗夜蓝&quot;</span>&gt;</span>暗夜蓝</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;style&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle(2);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:20px;height:20px&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清淡蓝&quot;</span>&gt;</span>清淡蓝</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;style&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle(3);&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:20px;height:20px&quot;</span> <span class="attr">value</span>=<span class="string">&quot;遥感&quot;</span>&gt;</span>遥感</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    mapboxgl.<span class="property">accessToken</span> = <span class="string">&#x27;pk.eyJ1IjoieGlhb3NoaWhkIiwiYSI6ImNrNngzYnRhdzBqNm0zZnJ4eWZjdndrYzkifQ.qQjf8zANr9PsMpwq2NsRWQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> mapboxStyle = [</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/Bkl7eaQNyU&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/HJeN6h7VyL&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;http://61.161.150.90:5081/api/v1/styles/aolutong/ByetWaXVJL&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;mapbox://styles/mapbox/satellite-v9&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">style</span>: mapboxStyle[<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">center</span>: [<span class="number">123.38</span>, <span class="number">41.8</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">zoom</span>: <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">changeSize</span>(<span class="params">bool</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (bool) &#123;</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">setZoom</span>(map.<span class="title function_">getZoom</span>() + <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">setZoom</span>(map.<span class="title function_">getZoom</span>() - <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">changeStyle</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">setStyle</span>(mapboxStyle[num]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ATtuing/p/9085312.html">开源方案搭建可离线的精美矢量切片地图服务-1.开篇（附成果演示地址）</a></p><p>Mapbox官方提供的在线样式编辑器：</p><p><a href="https://studio.mapbox.com/styles/">https://studio.mapbox.com/styles/</a></p><h2 id="空间分析库"><a href="#空间分析库" class="headerlink" title="空间分析库"></a>空间分析库</h2><p>Turf.js 是一个开源的空间分析库，由 Mapbox 提供。<a href="https://github.com/Turfjs/turf">源码地址</a>，在其(官网)[]中都有 Mapbox 作为底图的示例。</p><p>并且在 Mapbox 官网也推荐使用 Turf.js 作为空间分析库。</p><p>缓冲分析这些功能可以用的postgis自带的空间分析函数。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地图服务 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android嵌入Vue实现H5应用</title>
      <link href="/2022/04/22/Android%E5%B5%8C%E5%85%A5Vue%E5%AE%9E%E7%8E%B0H5%E5%BA%94%E7%94%A8/"/>
      <url>/2022/04/22/Android%E5%B5%8C%E5%85%A5Vue%E5%AE%9E%E7%8E%B0H5%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Android嵌入Vue实现H5应用"><a href="#Android嵌入Vue实现H5应用" class="headerlink" title="Android嵌入Vue实现H5应用"></a>Android嵌入Vue实现H5应用</h2><p>现在很多的App里都内置了Web网页（Hybrid App），比如说很多电商平台，淘宝、京东、聚划算等等。</p><p>他们的页面是由Android的WebView实现的，其中涉及到Android客户端与Web网页的交互。</p><p>Android WebView组件可以实现App中内置网页的功能。</p><p><code>WebView</code>是一个基于<code>webkit</code>引擎、展现<code>web</code>页面的控件。</p><blockquote><p>Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。</p></blockquote><p>作用为：</p><ul><li>显示和渲染Web页面</li><li>直接使用html文件（网络上或本地assets中）作布局</li><li>可和JavaScript交互调用</li></ul><span id="more"></span><p>==参考WebView教程==：<a href="https://www.jianshu.com/p/3c94ae673e2a">https://www.jianshu.com/p/3c94ae673e2a</a></p><p>AndroidManifest.xml<code>添加访问网络权限</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>WebViews只能加载HTTPS的站点，无法加载HTTP站点。当加载HTTP站点时，会报错<code>net :: ERR_CLEARTEXT_NOT_PERMITTED</code>。</p><p>在AndroidManifest.xml的<code>application</code>标签下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">....</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">....</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>activity_main.xml</code>添加WebView组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/webview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>MainActivity</code>找到该组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    webView = (WebView) findViewById(R.id.webview);</span><br><span class="line"></span><br><span class="line">    webView.loadUrl(<span class="string">&quot;https://xiaoshiapp.city/h5/index.html&quot;</span>); <span class="comment">// 加载远程网页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webview常用的工具类：</p><ul><li>WebSettings类：对WebView进行配置和管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明WebSettings子类</span></span><br><span class="line"><span class="type">WebSettings</span> <span class="variable">webSettings</span> <span class="operator">=</span> webView.getSettings();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="literal">true</span>);  </span><br><span class="line"><span class="comment">// 若加载的 html 里有JS 在执行动画等操作，会造成资源浪费（CPU、电量）</span></span><br><span class="line"><span class="comment">// 在 onStop 和 onResume 里分别把 setJavaScriptEnabled() 给设置成 false 和 true 即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持插件</span></span><br><span class="line">webSettings.setPluginsEnabled(<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置自适应屏幕，两者结合使用</span></span><br><span class="line">webSettings.setUseWideViewPort(<span class="literal">true</span>); <span class="comment">// 将图片调整到适合webview的大小 </span></span><br><span class="line">webSettings.setLoadWithOverviewMode(<span class="literal">true</span>); <span class="comment">// 缩放至屏幕的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缩放操作</span></span><br><span class="line">webSettings.setSupportZoom(<span class="literal">true</span>); <span class="comment">// 支持缩放，默认为true。是下面操作的前提，结合使用</span></span><br><span class="line">webSettings.setBuiltInZoomControls(<span class="literal">true</span>); <span class="comment">// 设置内置的缩放控件。若为false，则该WebView不可缩放</span></span><br><span class="line">webSettings.setDisplayZoomControls(<span class="literal">false</span>); <span class="comment">// 隐藏原生的缩放控件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存操作</span></span><br><span class="line">webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE); </span><br><span class="line"><span class="comment">//缓存模式如下：</span></span><br><span class="line"><span class="comment">//LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据</span></span><br><span class="line"><span class="comment">//LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。</span></span><br><span class="line"><span class="comment">//LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.</span></span><br><span class="line"><span class="comment">//LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他细节操作</span></span><br><span class="line">webSettings.setAllowFileAccess(<span class="literal">true</span>); <span class="comment">// 设置可以访问文件 </span></span><br><span class="line">webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class="literal">true</span>); <span class="comment">// 支持通过JS打开新窗口 </span></span><br><span class="line">webSettings.setLoadsImagesAutomatically(<span class="literal">true</span>); <span class="comment">// 支持自动加载图片</span></span><br><span class="line">webSettings.setDefaultTextEncodingName(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">// 设置编码格式</span></span><br></pre></td></tr></table></figure><ul><li>WebViewClient类：处理各种通知 &amp; 请求事件</li></ul><p>onPageStarted()</p><p>作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> &#123;</span><br><span class="line">        <span class="comment">//设定加载开始的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>onPageFinished()</p><p>作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageFinished</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">        <span class="comment">//设定加载结束的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>WebChromeClient类：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等</li></ul><p>onProgressChanged（）</p><p>作用：获得网页的加载进度并显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onProgressChanged</span><span class="params">(WebView view, <span class="type">int</span> newProgress)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newProgress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">progress</span> <span class="operator">=</span> newProgress + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">            progress.setText(progress);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="WebView与JavaScript的交互"><a href="#WebView与JavaScript的交互" class="headerlink" title="WebView与JavaScript的交互"></a>WebView与JavaScript的交互</h3><p>在WebView的开发中，经常需要用到本地函数与H5界面或者Js交互，传递数据等，但是Android本身自带的WebView与Js交互方式存在安全隐患问题，故不详细展开，需要可以看下面的教程链接。</p><p>Android与JS通过WebView互相调用方法，实际上是：</p><ul><li>Android去调用JS的代码</li><li>JS去调用Android的代码</li></ul><p>对于Android调用JS代码的方法有2种：</p><ol><li>通过<code>WebView</code>的<code>loadUrl（）</code></li><li>通过<code>WebView</code>的<code>evaluateJavascript（）</code></li></ol><p>对于JS调用Android代码的方法有3种：</p><ol><li>通过<code>WebView</code>的<code>addJavascriptInterface（）</code>进行对象映射</li><li>通过 <code>WebViewClient</code> 的<code>shouldOverrideUrlLoading ()</code>方法回调拦截 url</li><li>通过 <code>WebChromeClient</code> 的<code>onJsAlert()</code>、<code>onJsConfirm()</code>、<code>onJsPrompt（）</code>方法回调拦截JS对话框<code>alert()</code>、<code>confirm()</code>、<code>prompt（）</code> 消息</li></ol><p>==参考教程==：<a href="https://www.jianshu.com/p/345f4d8a5cfa">https://www.jianshu.com/p/345f4d8a5cfa</a></p><h3 id="JsBridge实现交互"><a href="#JsBridge实现交互" class="headerlink" title="JsBridge实现交互"></a>JsBridge实现交互</h3><p>为解决Android原生方法的安全隐患问题，推荐使用WebViewJavascriptBridge。</p><p>GitHub地址：<a href="https://github.com/lzyzsd/JsBridge">https://github.com/lzyzsd/JsBridge</a></p><p>Android和JS互调（调用相机拍照）</p><p>首先是Android写了一个拍照的方法<code>openCamera</code>，使用bridge暴露出去，JS调用该方法，成功后返回给JS<code>success</code>。</p><p>拍照完成后Android调用JS暴露的方法<code>picPath</code>将base64字符串传给JS。</p><p><img src="https://xiaoshi-blog-img.oss-cn-beijing.aliyuncs.com/img/20211207214944.png" alt="image-20211207214936885"></p><h4 id="Android配置"><a href="#Android配置" class="headerlink" title="Android配置"></a>Android配置</h4><p>根目录下的<code>build.gradle</code>（全局的项目构建配置）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://jitpack.io&quot;</span> &#125;  <span class="comment">// 添加依赖源,JitPack.io 是一个 GitHub 开源代码库的便捷发布渠道</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.5.2&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://jitpack.io&quot;</span> &#125;  <span class="comment">// 添加依赖源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APP目录下的<code>build.gradle</code>（app模块的gradle构建脚本，一般用来管理app包名、版本的以及添加和修改依赖库）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.github.lzyzsd:jsbridge:1.0.4&#x27;</span>  <span class="comment">// 添加依赖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><p>xml界面添加组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.github.lzyzsd.jsbridge.BridgeWebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_jsbridge_bridgewebview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.github.lzyzsd.jsbridge.BridgeWebView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Activity找到组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BridgeWebView bridgeWebView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_js_bridge);</span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化View</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">    bridgeWebView = findViewById(R.id.activity_jsbridge_bridgewebview);</span><br><span class="line">    bridgeWebView.loadUrl(<span class="string">&quot;https://www.cdfgroup.xyz/app/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BridgeWebView继承了WebView，所以WebWiew的工具类都可以正常使用</span></span><br><span class="line">    <span class="type">WebSettings</span> <span class="variable">webSettings</span> <span class="operator">=</span> bridgeWebView.getSettings();</span><br><span class="line">    webSettings.setJavaScriptEnabled(<span class="literal">true</span>); <span class="comment">// 开启JavaScript</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存设置</span></span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE); <span class="comment">// 不使用缓存</span></span><br><span class="line">    <span class="comment">// 自适应屏幕设置</span></span><br><span class="line">    webSettings.setUseWideViewPort(<span class="literal">true</span>); <span class="comment">// 将图片调整到适合webview的大小</span></span><br><span class="line">    webSettings.setLoadWithOverviewMode(<span class="literal">true</span>); <span class="comment">// 缩放至屏幕的大小</span></span><br><span class="line">    <span class="comment">// 缩放设置</span></span><br><span class="line">    webSettings.setSupportZoom(<span class="literal">true</span>); <span class="comment">// 支持缩放</span></span><br><span class="line">    webSettings.setBuiltInZoomControls(<span class="literal">true</span>); <span class="comment">// 设置内置的缩放控件</span></span><br><span class="line">    webSettings.setDisplayZoomControls(<span class="literal">false</span>); <span class="comment">// 隐藏原生的缩放控件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现互调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册函数，使JS能通过JSBridge调用Android</span></span><br><span class="line">bridgeWebView.registerHandler(<span class="string">&quot;openCamera&quot;</span>, <span class="keyword">new</span> <span class="title class_">BridgeHandler</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handler</span><span class="params">(String data, CallBackFunction function)</span> &#123;</span><br><span class="line">        <span class="comment">//JS传递给Android</span></span><br><span class="line">        Toast.makeText(JsBridgeActivity.<span class="built_in">this</span>, data, Toast.LENGTH_LONG).show();</span><br><span class="line">        takePhoto();  <span class="comment">// 拍照</span></span><br><span class="line">        <span class="comment">//Android返回给JS的消息</span></span><br><span class="line">        function.onCallBack(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android调用JS的方法（这里放在takePhoto()方法里面）</span></span><br><span class="line">bridgeWebView.callHandler(<span class="string">&quot;picPath&quot;</span>, pic64, <span class="keyword">new</span> <span class="title class_">CallBackFunction</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCallBack</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        Toast.makeText(JsBridgeActivity.<span class="built_in">this</span>, data, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="JS配置"><a href="#JS配置" class="headerlink" title="JS配置"></a>JS配置</h4><p>JS需要封装一个工具类<code>jsBridge</code>（参考：<a href="https://www.jianshu.com/p/b03eaa6fb38a">JSbridge 在Vue的封装与交互</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isAndroid = navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Adr&#x27;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> isiOS = !!navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行回调函数 这是必须要写的，用来创建一些设置</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="comment">//Android使用</span></span><br><span class="line">  <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">    <span class="comment">//如果该对象已存在则直接执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//否则添加事件监听再执行</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">        <span class="string">&#x27;WebViewJavascriptBridgeReady&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>(<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag，android&#x27;</span>);</span><br><span class="line">    sessionStorage.<span class="property">phoneType</span> = <span class="string">&#x27;android&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//iOS使用</span></span><br><span class="line">  <span class="keyword">if</span> (isiOS) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span> = [callback];</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">WVJBIframe</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">    <span class="title class_">WVJBIframe</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="title class_">WVJBIframe</span>.<span class="property">src</span> = <span class="string">&#x27;wvjbscheme://__BRIDGE_LOADED__&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(<span class="title class_">WVJBIframe</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">removeChild</span>(<span class="title class_">WVJBIframe</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;ios&#x27;</span>);</span><br><span class="line">    sessionStorage.<span class="property">phoneType</span> = <span class="string">&#x27;ios&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册回调函数，第一次连接时调用(进入H5页面) 初始化函数(android需要初始化,ios不用)</span></span><br><span class="line"><span class="title function_">setupWebViewJavascriptBridge</span>(<span class="function">(<span class="params">bridge</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag，setupWebViewJavascriptBridge&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">    <span class="comment">//初始化 一个无参数的handler供Android调用</span></span><br><span class="line">    bridge.<span class="title function_">init</span>(<span class="function">(<span class="params">message, responseCallback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JS got a message&#x27;</span>, message);</span><br><span class="line">      <span class="keyword">var</span> data = &#123;</span><br><span class="line">        <span class="string">&#x27;Javascript Responds&#x27;</span>: <span class="string">&#x27;Wee!&#x27;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">responseCallback</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// js调APP方法 （参数分别为:app提供的方法名  传给app的数据  回调）</span></span><br><span class="line">  <span class="title function_">callHandler</span>(<span class="params">name, data, callback</span>) &#123;</span><br><span class="line">    <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="function">(<span class="params">bridge</span>) =&gt;</span> &#123;</span><br><span class="line">      bridge.<span class="title function_">callHandler</span>(name, data, callback);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// APP调js方法 （参数分别为:js提供的方法名  回调）</span></span><br><span class="line">  <span class="title function_">registerHandler</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line">    <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="function">(<span class="params">bridge</span>) =&gt;</span> &#123;</span><br><span class="line">      bridge.<span class="title function_">registerHandler</span>(name, <span class="function">(<span class="params">data, responseCallback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(data, responseCallback);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>之后在<code>main.js</code>中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsBridge <span class="keyword">from</span> <span class="string">&#x27;./utils/jsBridge.js&#x27;</span>  <span class="comment">// h5和安卓原生联调</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bridge</span> = jsBridge;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用Android的方法(JS调用Android)</span></span><br><span class="line"><span class="title function_">chooseImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用拍照&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bridge</span>.<span class="title function_">callHandler</span>(</span><br><span class="line">    <span class="string">&#x27;openCamera&#x27;</span></span><br><span class="line">    , &#123;<span class="string">&#x27;param&#x27;</span>: <span class="string">&quot;hello,android!&quot;</span>&#125;</span><br><span class="line">    , <span class="function">(<span class="params">responseData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JS接收到：&quot;</span> + responseData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册接收图片路径的回调方法(Android调用JS)</span></span><br><span class="line"><span class="title function_">registerPicResultFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bridge</span>.<span class="title function_">registerHandler</span>(<span class="string">&quot;picPath&quot;</span>, <span class="function">(<span class="params">data, responseCallback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JS接收到图片的base64编码：&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="keyword">let</span> base64 = data.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>, <span class="string">&quot;%2B&quot;</span>);  <span class="comment">// 加上这个保证上传的图片下载进来是正确的</span></span><br><span class="line">    <span class="comment">// 获得安卓的图片路径</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">picList</span>.<span class="title function_">push</span>(&#123;<span class="attr">url</span>: <span class="string">&quot;data:image/png;base64,&quot;</span> + base64&#125;);</span><br><span class="line">    <span class="comment">// 接收成功并返回值给安卓</span></span><br><span class="line">    <span class="title function_">responseCallback</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>在开发中比较麻烦的问题就是调试了。比如写了一个地图定位程序，JS需要调用Android原生的定位方法。</p><ol><li><p>写一个Android获取当前定位信息的接口</p></li><li><p>JS调用后显示当前位置在地图上</p></li></ol><p>当JS还需要依赖该定位数据写一些复杂的逻辑时，调试很麻烦。</p><ol><li>JS程序逻辑编写</li><li>JS程序打包</li><li>Android更新打包后的JS程序</li><li>Android Studio连接手机进行调试，观察控制台输出数据</li></ol><p>发现问题后修改代码还得执行一次这个流程，真的心累。</p><p>目前尚未找到合适的解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
